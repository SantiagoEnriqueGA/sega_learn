DEFAULT_TESTS = [
    "test_accuracy (test_utils.TestMetrics.test_accuracy)",
    "test_Activation (test_neural_networks_imports.TestImportsNeuralNetworks.test_Activation)",
    "test_activation_function_invalid (test_neural_networks_layers.TestConvLayer.test_activation_function_invalid)",
    "test_activation_function_invalid (test_neural_networks_layers.TestDenseLayer.test_activation_function_invalid)",
    "test_activation_function_leaky_relu (test_neural_networks_layers.TestConvLayer.test_activation_function_leaky_relu)",
    "test_activation_function_leaky_relu (test_neural_networks_layers.TestDenseLayer.test_activation_function_leaky_relu)",
    "test_activation_function_lineaar (test_neural_networks_layers.TestConvLayer.test_activation_function_lineaar)",
    "test_activation_function_lineaar (test_neural_networks_layers.TestDenseLayer.test_activation_function_lineaar)",
    "test_activation_function_none (test_neural_networks_layers.TestConvLayer.test_activation_function_none)",
    "test_activation_function_none (test_neural_networks_layers.TestDenseLayer.test_activation_function_none)",
    "test_activation_function_relu (test_neural_networks_layers.TestConvLayer.test_activation_function_relu)",
    "test_activation_function_relu (test_neural_networks_layers.TestDenseLayer.test_activation_function_relu)",
    "test_activation_function_sigmoid (test_neural_networks_layers.TestConvLayer.test_activation_function_sigmoid)",
    "test_activation_function_sigmoid (test_neural_networks_layers.TestDenseLayer.test_activation_function_sigmoid)",
    "test_activation_function_softmax (test_neural_networks_layers.TestConvLayer.test_activation_function_softmax)",
    "test_activation_function_softmax (test_neural_networks_layers.TestDenseLayer.test_activation_function_softmax)",
    "test_activation_function_tanh (test_neural_networks_layers.TestConvLayer.test_activation_function_tanh)",
    "test_activation_function_tanh (test_neural_networks_layers.TestDenseLayer.test_activation_function_tanh)",
    "test_AdaBoostClassifier (test_trees_imports.TestImportsLinear.test_AdaBoostClassifier)",
    "test_AdaBoostRegressor (test_trees_imports.TestImportsLinear.test_AdaBoostRegressor)",
    "test_AdadeltaOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_AdadeltaOptimizer)",
    "test_adam_optimizer_initial_values (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaOptimizers.test_adam_optimizer_initial_values)",
    "test_AdamOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_AdamOptimizer)",
    "test_add_evaluator (test_pipelines_forecasting.TestForecastingPipeline.test_add_evaluator)",
    "test_add_model (test_pipelines_forecasting.TestForecastingPipeline.test_add_model)",
    "test_add_preprocessor (test_pipelines_forecasting.TestForecastingPipeline.test_add_preprocessor)",
    "test_add_training_frame (test_neural_networks_animation.TestTrainingAnimator.test_add_training_frame)",
    "test_AdditiveDecomposition (test_time_series_imports.TestImportsTimeSeries.test_AdditiveDecomposition)",
    "test_all_imports (test_imports.TestImports.test_all_imports)",
    "test_animate_training_metrics (test_neural_networks_animation.TestTrainingAnimator.test_animate_training_metrics)",
    "test_animate_training_metrics_no_initialize (test_neural_networks_animation.TestTrainingAnimator.test_animate_training_metrics_no_initialize)",
    "test_AnimationBase (test_utils_imports.TestImportsUtils.test_AnimationBase)",
    "test_anomaly_score (test_trees_isolation.TestIsolationForest.test_anomaly_score)",
    "test_anomaly_score_with_empty_data (test_trees_isolation.TestIsolationForest.test_anomaly_score_with_empty_data)",
    "test_apply_dropout (test_neural_networks_base.TestNeuralNetworkVanilla.test_apply_dropout)",
    "test_apply_dropout (test_neural_networks_numba.TestNeuralNetworkNumba.test_apply_dropout)",
    "test_apply_dropout_zero (test_neural_networks_base.TestNeuralNetworkVanilla.test_apply_dropout_zero)",
    "test_apply_dropout_zero (test_neural_networks_numba.TestNeuralNetworkNumba.test_apply_dropout_zero)",
    "test_ARIMA (test_time_series_imports.TestImportsTimeSeries.test_ARIMA)",
    "test_augment (test_utils.TestDataAugmentation.test_augment)",
    "test_augment_with_balanced_data (test_utils.TestDataAugmentation.test_augment_with_balanced_data)",
    "test_augment_with_empty_techniques (test_utils.TestDataAugmentation.test_augment_with_empty_techniques)",
    "test_augment_with_invalid_input (test_utils.TestDataAugmentation.test_augment_with_invalid_input)",
    "test_augment_with_invalid_technique (test_utils.TestDataAugmentation.test_augment_with_invalid_technique)",
    "test_augment_with_invalid_techniques (test_utils.TestDataAugmentation.test_augment_with_invalid_techniques)",
    "test_augment_with_multiple_techniques (test_utils.TestDataAugmentation.test_augment_with_multiple_techniques)",
    "test_augment_with_one_technique (test_utils.TestDataAugmentation.test_augment_with_one_technique)",
    "test_Augmenter (test_utils_imports.TestImportsUtils.test_Augmenter)",
    "test_auto_eps (test_clustering.TestDBSCAN.test_auto_eps)",
    "test_auto_imports (test_imports.TestImports.test_auto_imports)",
    "test_AutoClassifier (test_auto_imports.TestImportsLinear.test_AutoClassifier)",
    "test_AutoRegressor (test_auto_imports.TestImportsLinear.test_AutoRegressor)",
    "test_backward (test_neural_networks_base.TestNeuralNetworkVanilla.test_backward)",
    "test_backward (test_neural_networks_layers.TestConvLayer.test_backward)",
    "test_backward (test_neural_networks_layers.TestDenseLayer.test_backward)",
    "test_backward (test_neural_networks_layers.TestFlattenLayer.test_backward)",
    "test_backward_with_empty_input (test_neural_networks_layers.TestFlattenLayer.test_backward_with_empty_input)",
    "test_backward_with_large_padding (test_neural_networks_layers.TestConvLayer.test_backward_with_large_padding)",
    "test_backward_with_single_pixel (test_neural_networks_layers.TestConvLayer.test_backward_with_single_pixel)",
    "test_backward_with_zeros (test_neural_networks_layers.TestDenseLayer.test_backward_with_zeros)",
    "test_base_backend_imports (test_neural_networks_imports.TestImportsNeuralNetworks.test_base_backend_imports)",
    "test_base_backend_wildcard_import (test_neural_networks_imports.TestImportsNeuralNetworks.test_base_backend_wildcard_import)",
    "test_base_method_imports (test_neural_networks_imports.TestImportsNeuralNetworks.test_base_method_imports)",
    "test_base_method_wildcard_import (test_neural_networks_imports.TestImportsNeuralNetworks.test_base_method_wildcard_import)",
    "test_BaseSVM (test_svm_imports.TestImportsSVM.test_BaseSVM)",
    "test_basic_functionality (test_utils_dataSplitting.TestTrainTestSplit.test_basic_functionality)",
    "test_bayes.py (test_linear_model_examples.TestExamplesLinearModels.test_bayes.py)",
    "test_Bayesian (test_linear_model_imports.TestImportsLinear.test_Bayesian)",
    "test_bayesian (test_utils.TestGridSearchCV.test_bayesian)",
    "test_bayesian (test_utils.TestRandomSearchCV.test_bayesian)",
    "test_bce_with_logits_loss (test_neural_networks_loss.TestBCEWithLogitsLoss.test_bce_with_logits_loss)",
    "test_bce_with_logits_loss (test_neural_networks_lossJIT.TestJITBCEWithLogitsLoss.test_bce_with_logits_loss)",
    "test_bce_with_logits_loss (test_neural_networks_lossJIT.TestJITvsNonJITLosses.test_bce_with_logits_loss)",
    "test_bce_with_logits_loss_edge_cases (test_neural_networks_loss.TestBCEWithLogitsLoss.test_bce_with_logits_loss_edge_cases)",
    "test_bce_with_logits_loss_edge_cases (test_neural_networks_lossJIT.TestJITBCEWithLogitsLoss.test_bce_with_logits_loss_edge_cases)",
    "test_bce_with_logits_loss_empty_inputs (test_neural_networks_loss.TestBCEWithLogitsLoss.test_bce_with_logits_loss_empty_inputs)",
    "test_bce_with_logits_loss_empty_inputs (test_neural_networks_lossJIT.TestJITBCEWithLogitsLoss.test_bce_with_logits_loss_empty_inputs)",
    "test_BCEWithLogitsLoss (test_neural_networks_imports.TestImportsNeuralNetworks.test_BCEWithLogitsLoss)",
    "test_best_split (test_trees_classifier.TestClassifierTreeUtility.test_best_split)",
    "test_best_split (test_trees_regressor.TestRegressorTreeUtility.test_best_split)",
    "test_best_split_empty (test_trees_classifier.TestClassifierTreeUtility.test_best_split_empty)",
    "test_best_split_empty_indices (test_trees_regressor.TestRegressorTreeUtility.test_best_split_empty_indices)",
    "test_best_split_insufficient_samples (test_trees_regressor.TestRegressorTreeUtility.test_best_split_insufficient_samples)",
    "test_best_split_invalid_indices (test_trees_regressor.TestRegressorTreeUtility.test_best_split_invalid_indices)",
    "test_best_split_invalid_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_best_split_invalid_sample_weights)",
    "test_best_split_min_samples_split (test_trees_regressor.TestRegressorTreeUtility.test_best_split_min_samples_split)",
    "test_best_split_min_samples_split_large (test_trees_regressor.TestRegressorTreeUtility.test_best_split_min_samples_split_large)",
    "test_best_split_non_numeric_indices (test_trees_regressor.TestRegressorTreeUtility.test_best_split_non_numeric_indices)",
    "test_best_split_non_numeric_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_best_split_non_numeric_sample_weights)",
    "test_best_split_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_best_split_sample_weights)",
    "test_best_split_sample_weights_empty (test_trees_regressor.TestRegressorTreeUtility.test_best_split_sample_weights_empty)",
    "test_best_split_sample_weights_shape_mismatch (test_trees_regressor.TestRegressorTreeUtility.test_best_split_sample_weights_shape_mismatch)",
    "test_best_split_single_element (test_trees_classifier.TestClassifierTreeUtility.test_best_split_single_element)",
    "test_best_split_single_index (test_trees_regressor.TestRegressorTreeUtility.test_best_split_single_index)",
    "test_best_split_single_value (test_trees_regressor.TestRegressorTreeUtility.test_best_split_single_value)",
    "test_best_split_single_value_indices (test_trees_regressor.TestRegressorTreeUtility.test_best_split_single_value_indices)",
    "test_best_split_with_3_min_samples_split (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_3_min_samples_split)",
    "test_best_split_with_different_length_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_different_length_sample_weights)",
    "test_best_split_with_empty_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_empty_sample_weights)",
    "test_best_split_with_min_samples_split (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_min_samples_split)",
    "test_best_split_with_none_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_none_sample_weights)",
    "test_best_split_with_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_best_split_with_sample_weights)",
    "test_binary_cross_entropy_loss (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaLoss.test_binary_cross_entropy_loss)",
    "test_calculate_leaf_value (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value)",
    "test_calculate_leaf_value_empty (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_empty)",
    "test_calculate_leaf_value_invalid_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_invalid_indices)",
    "test_calculate_leaf_value_invalid_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_invalid_sample_weights)",
    "test_calculate_leaf_value_non_numeric_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_non_numeric_indices)",
    "test_calculate_leaf_value_non_numeric_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_non_numeric_sample_weights)",
    "test_calculate_leaf_value_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_sample_weights)",
    "test_calculate_leaf_value_sample_weights_shape_mismatch (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_sample_weights_shape_mismatch)",
    "test_calculate_leaf_value_single_index (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_single_index)",
    "test_calculate_leaf_value_subset (test_trees_regressor.TestRegressorTreeUtility.test_calculate_leaf_value_subset)",
    "test_calculate_loss (test_neural_networks_base.TestNeuralNetworkVanilla.test_calculate_loss)",
    "test_calculate_loss (test_neural_networks_numba.TestNeuralNetworkNumba.test_calculate_loss)",
    "test_calculate_loss_regression (test_neural_networks_base.TestNeuralNetworkVanilla.test_calculate_loss_regression)",
    "test_calculate_loss_regression (test_neural_networks_numba.TestNeuralNetworkNumba.test_calculate_loss_regression)",
    "test_calculate_variance (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance)",
    "test_calculate_variance_empty (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_empty)",
    "test_calculate_variance_invalid_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_invalid_indices)",
    "test_calculate_variance_invalid_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_invalid_sample_weights)",
    "test_calculate_variance_multiple_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_multiple_indices)",
    "test_calculate_variance_non_numeric_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_non_numeric_indices)",
    "test_calculate_variance_non_numeric_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_non_numeric_sample_weights)",
    "test_calculate_variance_sample_weights (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_sample_weights)",
    "test_calculate_variance_sample_weights_empty (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_sample_weights_empty)",
    "test_calculate_variance_sample_weights_shape_mismatch (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_sample_weights_shape_mismatch)",
    "test_calculate_variance_single_index (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_single_index)",
    "test_calculate_variance_single_value_indices (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_single_value_indices)",
    "test_calculate_variance_subset (test_trees_regressor.TestRegressorTreeUtility.test_calculate_variance_subset)",
    "test_calinski_harabasz_index (test_clustering.TestKMeans.test_calinski_harabasz_index)",
    "test_check_is_fitted (test_utils_imports.TestImportsUtils.test_check_is_fitted)",
    "test_check_X_y (test_utils_imports.TestImportsUtils.test_check_X_y)",
    "test_classification_animate (test_utils_animator.TestAnimationIntegration.test_classification_animate)",
    "test_classification_report (test_utils.TestMetrics.test_classification_report)",
    "test_ClassificationAnimation (test_utils_imports.TestImportsUtils.test_ClassificationAnimation)",
    "test_ClassifierTree (test_trees_imports.TestImportsLinear.test_ClassifierTree)",
    "test_classifierTree (test_utils.TestGridSearchCV.test_classifierTree)",
    "test_classifierTree (test_utils.TestRandomSearchCV.test_classifierTree)",
    "test_ClassifierTreeUtility (test_trees_imports.TestImportsLinear.test_ClassifierTreeUtility)",
    "test_classify_empty_tree (test_trees_classifier.TestClassifierTree.test_classify_empty_tree)",
    "test_classify_single_node_tree (test_trees_classifier.TestClassifierTree.test_classify_single_node_tree)",
    "test_classify_with_split (test_trees_classifier.TestClassifierTree.test_classify_with_split)",
    "test_clustering_imports (test_imports.TestImports.test_clustering_imports)",
    "test_coef_ (test_linear_model.TestBayesian.test_coef_)",
    "test_coef_ (test_linear_model.TestLasso.test_coef_)",
    "test_coef_ (test_linear_model.TestOrdinaryLeastSquares.test_coef_)",
    "test_coef_ (test_linear_model.TestPassiveAggressiveRegressor.test_coef_)",
    "test_coef_ (test_linear_model.TestRidge.test_coef_)",
    "test_col2im (test_neural_networks_layers.TestConvLayer.test_col2im)",
    "test_combined_sizes (test_utils_dataSplitting.TestTrainTestSplit.test_combined_sizes)",
    "test_compute_avg_path_length (test_trees_isolation.TestIsolationUtils.test_compute_avg_path_length)",
    "test_compute_l2_reg (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaUtils.test_compute_l2_reg)",
    "test_confusion_matrix (test_utils.TestMetrics.test_confusion_matrix)",
    "test_cross_entropy_loss (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaLoss.test_cross_entropy_loss)",
    "test_cross_entropy_loss (test_neural_networks_lossJIT.TestJITvsNonJITLosses.test_cross_entropy_loss)",
    "test_cross_entropy_loss_empty_inputs (test_neural_networks_loss.TestCrossEntropyLoss.test_cross_entropy_loss_empty_inputs)",
    "test_cross_entropy_loss_empty_inputs (test_neural_networks_lossJIT.TestJITCrossEntropyLoss.test_cross_entropy_loss_empty_inputs)",
    "test_cross_entropy_loss_extreme_values (test_neural_networks_loss.TestCrossEntropyLoss.test_cross_entropy_loss_extreme_values)",
    "test_cross_entropy_loss_extreme_values (test_neural_networks_lossJIT.TestJITCrossEntropyLoss.test_cross_entropy_loss_extreme_values)",
    "test_cross_entropy_loss_mismatched_shapes (test_neural_networks_loss.TestCrossEntropyLoss.test_cross_entropy_loss_mismatched_shapes)",
    "test_cross_entropy_loss_mismatched_shapes (test_neural_networks_lossJIT.TestJITCrossEntropyLoss.test_cross_entropy_loss_mismatched_shapes)",
    "test_cross_entropy_loss_multi_class (test_neural_networks_loss.TestCrossEntropyLoss.test_cross_entropy_loss_multi_class)",
    "test_cross_entropy_loss_multi_class (test_neural_networks_lossJIT.TestJITCrossEntropyLoss.test_cross_entropy_loss_multi_class)",
    "test_cross_entropy_loss_single_class (test_neural_networks_loss.TestCrossEntropyLoss.test_cross_entropy_loss_single_class)",
    "test_cross_entropy_loss_single_class (test_neural_networks_lossJIT.TestJITCrossEntropyLoss.test_cross_entropy_loss_single_class)",
    "test_cross_validate (test_utils.TestModelSelectionUtils.test_cross_validate)",
    "test_cross_validate_cv_1 (test_utils.TestModelSelectionUtils.test_cross_validate_cv_1)",
    "test_cross_validate_invalid (test_utils.TestModelSelectionUtils.test_cross_validate_invalid)",
    "test_cross_validate_invalid_cv (test_utils.TestModelSelectionUtils.test_cross_validate_invalid_cv)",
    "test_cross_validate_invalid_params (test_utils.TestModelSelectionUtils.test_cross_validate_invalid_params)",
    "test_cross_validate_invalid_params_type (test_utils.TestModelSelectionUtils.test_cross_validate_invalid_params_type)",
    "test_CrossEntropyLoss (test_neural_networks_imports.TestImportsNeuralNetworks.test_CrossEntropyLoss)",
    "test_custom_base_estimator (test_trees_adaboost.TestAdaBoostClassifier.test_custom_base_estimator)",
    "test_custom_base_estimator (test_trees_adaboost.TestAdaBoostRegressor.test_custom_base_estimator)",
    "test_custom_base_estimator_forrest (test_trees_adaboost.TestAdaBoostClassifier.test_custom_base_estimator_forrest)",
    "test_custom_base_estimator_forrest (test_trees_adaboost.TestAdaBoostRegressor.test_custom_base_estimator_forrest)",
    "test_custom_base_estimator_gradient (test_trees_adaboost.TestAdaBoostClassifier.test_custom_base_estimator_gradient)",
    "test_custom_base_estimator_gradient (test_trees_adaboost.TestAdaBoostRegressor.test_custom_base_estimator_gradient)",
    "test_custom_base_estimator_invalid (test_trees_adaboost.TestAdaBoostClassifier.test_custom_base_estimator_invalid)",
    "test_custom_base_estimator_invalid (test_trees_adaboost.TestAdaBoostRegressor.test_custom_base_estimator_invalid)",
    "test_custom_base_estimator_tree (test_trees_adaboost.TestAdaBoostClassifier.test_custom_base_estimator_tree)",
    "test_custom_base_estimator_tree (test_trees_adaboost.TestAdaBoostRegressor.test_custom_base_estimator_tree)",
    "test_data_precision (test_nearest_neighbors.TestKNeighborsClassifier.test_data_precision)",
    "test_data_precision (test_nearest_neighbors.TestKNeighborsRegressor.test_data_precision)",
    "test_dataAugmentation_combined.py (test_utils_examples.TestExamplesClustering.test_dataAugmentation_combined.py)",
    "test_dataAugmentation_randOver.py (test_utils_examples.TestExamplesClustering.test_dataAugmentation_randOver.py)",
    "test_dataAugmentation_randUnder.py (test_utils_examples.TestExamplesClustering.test_dataAugmentation_randUnder.py)",
    "test_dataAugmentation_smote.py (test_utils_examples.TestExamplesClustering.test_dataAugmentation_smote.py)",
    "test_DataPrep (test_utils_imports.TestImportsUtils.test_DataPrep)",
    "test_davies_bouldin_index (test_clustering.TestKMeans.test_davies_bouldin_index)",
    "test_DBSCAN (test_clustering_imports.TestImportsClustering.test_DBSCAN)",
    "test_dbscan.py (test_clustering_examples.TestExamplesClustering.test_dbscan.py)",
    "test_dbscan_3d_aimated.py (test_clustering_examples.TestExamplesClustering.test_dbscan_3d_aimated.py)",
    "test_decision_function (test_svm_oneClass.TestOneClassSVM.test_decision_function)",
    "test_decision_function (test_trees_classifier.TesGradientBoostedClassifier.test_decision_function)",
    "test_decision_function_binary (test_svm_generalized.TestGeneralizedSVC.test_decision_function_binary)",
    "test_decision_function_binary (test_svm_linear.TestLinearSVC.test_decision_function_binary)",
    "test_decision_function_binary (test_trees_adaboost.TestAdaBoostClassifier.test_decision_function_binary)",
    "test_decision_function_multiclass (test_trees_adaboost.TestAdaBoostClassifier.test_decision_function_multiclass)",
    "test_decision_function_regression (test_svm_generalized.TestGeneralizedSVR.test_decision_function_regression)",
    "test_decision_function_regression (test_svm_linear.TestLinearSVR.test_decision_function_regression)",
    "test_decom_additiveDecomposition.py (test_time_series_examples.TestExamplesNearestNeighbors.test_decom_additiveDecomposition.py)",
    "test_decom_multiplicativeDecomposition.py (test_time_series_examples.TestExamplesNearestNeighbors.test_decom_multiplicativeDecomposition.py)",
    "test_default_activations (test_neural_networks_base.TestNeuralNetworkVanilla.test_default_activations)",
    "test_default_activations (test_neural_networks_numba.TestNeuralNetworkNumba.test_default_activations)",
    "test_DenseLayer (test_neural_networks_imports.TestImportsNeuralNetworks.test_DenseLayer)",
    "test_df_to_ndarray (test_utils.TestDataPrep.test_df_to_ndarray)",
    "test_differencing_d0 (test_time_series_arima.TestARIMA.test_differencing_d0)",
    "test_differencing_d1 (test_time_series_arima.TestARIMA.test_differencing_d1)",
    "test_differencing_d2 (test_time_series_arima.TestARIMA.test_differencing_d2)",
    "test_different_input_types (test_utils_dataSplitting.TestTrainTestSplit.test_different_input_types)",
    "test_different_test_sizes (test_utils_dataSplitting.TestTrainTestSplit.test_different_test_sizes)",
    "test_different_train_sizes (test_utils_dataSplitting.TestTrainTestSplit.test_different_train_sizes)",
    "test_distance_metric (test_nearest_neighbors.TestKNeighborsClassifier.test_distance_metric)",
    "test_distance_metric (test_nearest_neighbors.TestKNeighborsRegressor.test_distance_metric)",
    "test_DoubleExponentialSmoothing (test_time_series_imports.TestImportsTimeSeries.test_DoubleExponentialSmoothing)",
    "test_early_stopping_perfect_fit (test_trees_adaboost.TestAdaBoostClassifier.test_early_stopping_perfect_fit)",
    "test_early_stopping_perfect_fit (test_trees_adaboost.TestAdaBoostRegressor.test_early_stopping_perfect_fit)",
    "test_edge_cases (test_utils_dataSplitting.TestTrainTestSplit.test_edge_cases)",
    "test_elbow_method (test_clustering.TestKMeans.test_elbow_method)",
    "test_empty_dataset (test_auto.TestAutoClassifier.test_empty_dataset)",
    "test_empty_dataset (test_auto.TestAutoRegressor.test_empty_dataset)",
    "test_empty_series (test_time_series_decomposition.TestCenteredMovingAverage.test_empty_series)",
    "test_entropy (test_trees_classifier.TestClassifierTreeUtility.test_entropy)",
    "test_entropy_empty (test_trees_classifier.TestClassifierTreeUtility.test_entropy_empty)",
    "test_entropy_single_element (test_trees_classifier.TestClassifierTreeUtility.test_entropy_single_element)",
    "test_entropy_with_empty_list (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_empty_list)",
    "test_entropy_with_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_sample_weights)",
    "test_entropy_with_sample_weights_different_length (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_sample_weights_different_length)",
    "test_entropy_with_sample_weights_empty (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_sample_weights_empty)",
    "test_entropy_with_sample_weights_single_class (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_sample_weights_single_class)",
    "test_entropy_with_sample_weights_single_element (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_sample_weights_single_element)",
    "test_entropy_with_single_class (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_single_class)",
    "test_entropy_with_single_element (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_single_element)",
    "test_entropy_with_two_classes (test_trees_classifier.TestClassifierTreeUtility.test_entropy_with_two_classes)",
    "test_epsilon (test_svm_generalized.TestGeneralizedSVR.test_epsilon)",
    "test_epsilon (test_svm_linear.TestLinearSVR.test_epsilon)",
    "test_evaluate (test_auto.TestAutoClassifier.test_evaluate)",
    "test_evaluate (test_neural_networks_base.TestNeuralNetworkVanilla.test_evaluate)",
    "test_evaluate (test_neural_networks_numba.TestNeuralNetworkNumba.test_evaluate)",
    "test_evaluate (test_pipelines_forecasting.TestForecastingPipeline.test_evaluate)",
    "test_evaluate_no_evaluators (test_pipelines_forecasting.TestForecastingPipeline.test_evaluate_no_evaluators)",
    "test_evaluate_regression (test_neural_networks_base.TestNeuralNetworkVanilla.test_evaluate_regression)",
    "test_evaluate_regression (test_neural_networks_numba.TestNeuralNetworkNumba.test_evaluate_regression)",
    "test_evaluate_with_custom_metrics (test_auto.TestAutoClassifier.test_evaluate_with_custom_metrics)",
    "test_even_window (test_time_series_decomposition.TestCenteredMovingAverage.test_even_window)",
    "test_even_window_longer (test_time_series_decomposition.TestCenteredMovingAverage.test_even_window_longer)",
    "test_ExponentialMovingAverage (test_time_series_imports.TestImportsTimeSeries.test_ExponentialMovingAverage)",
    "test_f1_score (test_utils.TestMetrics.test_f1_score)",
    "test_find_best_order (test_time_series_arima.TestARIMA.test_find_best_order)",
    "test_find_best_order (test_time_series_arima.TestSARIMA.test_find_best_order)",
    "test_find_best_order (test_time_series_arima.TestSARIMAX.test_find_best_order)",
    "test_find_best_order_empty_data (test_time_series_arima.TestARIMA.test_find_best_order_empty_data)",
    "test_find_best_order_invalid_data_type (test_time_series_arima.TestARIMA.test_find_best_order_invalid_data_type)",
    "test_find_best_order_invalid_subset (test_time_series_arima.TestARIMA.test_find_best_order_invalid_subset)",
    "test_find_best_order_subset (test_time_series_arima.TestARIMA.test_find_best_order_subset)",
    "test_find_categorical_columns (test_utils.TestDataPrep.test_find_categorical_columns)",
    "test_find_categorical_columns_dataframe (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_find_categorical_columns_dataframe)",
    "test_find_categorical_columns_empty (test_utils.TestDataPrep.test_find_categorical_columns_empty)",
    "test_find_categorical_columns_invalid (test_utils.TestDataPrep.test_find_categorical_columns_invalid)",
    "test_find_categorical_columns_multiple (test_utils.TestDataPrep.test_find_categorical_columns_multiple)",
    "test_find_categorical_columns_numpy (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_find_categorical_columns_numpy)",
    "test_find_optimal_clusters (test_clustering.TestKMeans.test_find_optimal_clusters)",
    "test_finish_training_video (test_neural_networks_animation.TestTrainingAnimator.test_finish_training_video)",
    "test_fit (test_auto.TestAutoClassifier.test_fit)",
    "test_fit (test_clustering.TestDBSCAN.test_fit)",
    "test_fit (test_clustering.TestDBSCANNumba.test_fit)",
    "test_fit (test_clustering.TestKMeans.test_fit)",
    "test_fit (test_nearest_neighbors.TestKNeighborsClassifier.test_fit)",
    "test_fit (test_nearest_neighbors.TestKNeighborsRegressor.test_fit)",
    "test_fit (test_pipelines_forecasting.TestForecastingPipeline.test_fit)",
    "test_fit (test_svm_oneClass.TestOneClassSVM.test_fit)",
    "test_fit (test_time_series_arima.TestARIMA.test_fit)",
    "test_fit (test_time_series_arima.TestSARIMA.test_fit)",
    "test_fit (test_time_series_arima.TestSARIMAX.test_fit)",
    "test_fit (test_time_series_decomposition.TestAdditiveDecomposition.test_fit)",
    "test_fit (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_fit)",
    "test_fit (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_fit)",
    "test_fit (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_fit)",
    "test_fit (test_time_series_moving_average.TestExponentialMovingAverage.test_fit)",
    "test_fit (test_time_series_moving_average.TestSimpleMovingAverage.test_fit)",
    "test_fit (test_time_series_moving_average.TestWeightedMovingAverage.test_fit)",
    "test_fit (test_trees_classifier.TesGradientBoostedClassifier.test_fit)",
    "test_fit (test_trees_classifier.TestRandomForestClassifier.test_fit)",
    "test_fit (test_trees_isolation.TestIsolationForest.test_fit)",
    "test_fit (test_trees_isolation.TestIsolationTree.test_fit)",
    "test_fit (test_trees_regressor.TestGradientBoostedRegressor.test_fit)",
    "test_fit (test_trees_regressor.TestRandomForestRegressor.test_fit)",
    "test_fit (test_trees_regressor.TestRegressorTree.test_fit)",
    "test_fit (test_utils.TestPolynomialTransform.test_fit)",
    "test_fit_1d_exog (test_time_series_arima.TestSARIMAX.test_fit_1d_exog)",
    "test_fit_all_steps (test_linear_model.TestPassiveAggressiveRegressor.test_fit_all_steps)",
    "test_fit_arima (test_pipelines_forecasting.TestForecastingPipeline.test_fit_arima)",
    "test_fit_auto_scale_n (test_linear_model.TestRANSAC.test_fit_auto_scale_n)",
    "test_fit_auto_scale_t (test_linear_model.TestRANSAC.test_fit_auto_scale_t)",
    "test_fit_binary (test_svm_generalized.TestGeneralizedSVC.test_fit_binary)",
    "test_fit_binary (test_svm_linear.TestLinearSVC.test_fit_binary)",
    "test_fit_d (test_linear_model.TestRANSAC.test_fit_d)",
    "test_fit_double_exponential_smoothing (test_pipelines_forecasting.TestForecastingPipeline.test_fit_double_exponential_smoothing)",
    "test_fit_double_exponential_smoothing_model (test_pipelines_forecasting.TestForecastingPipeline.test_fit_double_exponential_smoothing_model)",
    "test_fit_empty (test_trees_regressor.TestGradientBoostedRegressor.test_fit_empty)",
    "test_fit_empty (test_trees_regressor.TestRandomForestRegressor.test_fit_empty)",
    "test_fit_empty (test_trees_regressor.TestRegressorTree.test_fit_empty)",
    "test_fit_empty_dataset (test_trees_classifier.TesGradientBoostedClassifier.test_fit_empty_dataset)",
    "test_fit_empty_dataset (test_trees_classifier.TestRandomForestClassifier.test_fit_empty_dataset)",
    "test_fit_empty_series (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_fit_empty_series)",
    "test_fit_empty_series (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_fit_empty_series)",
    "test_fit_empty_series (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_fit_empty_series)",
    "test_fit_empty_series (test_time_series_moving_average.TestExponentialMovingAverage.test_fit_empty_series)",
    "test_fit_empty_series (test_time_series_moving_average.TestSimpleMovingAverage.test_fit_empty_series)",
    "test_fit_empty_series (test_time_series_moving_average.TestWeightedMovingAverage.test_fit_empty_series)",
    "test_fit_exponential_moving_average (test_pipelines_forecasting.TestForecastingPipeline.test_fit_exponential_moving_average)",
    "test_fit_exponential_smoothing (test_pipelines_forecasting.TestForecastingPipeline.test_fit_exponential_smoothing)",
    "test_fit_exponential_smoothing_model (test_pipelines_forecasting.TestForecastingPipeline.test_fit_exponential_smoothing_model)",
    "test_fit_insufficient_data_for_differencing (test_time_series_arima.TestARIMA.test_fit_insufficient_data_for_differencing)",
    "test_fit_insufficient_series (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_fit_insufficient_series)",
    "test_fit_insufficient_series (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_fit_insufficient_series)",
    "test_fit_intercept (test_linear_model.TestBayesian.test_fit_intercept)",
    "test_fit_intercept (test_linear_model.TestLasso.test_fit_intercept)",
    "test_fit_intercept (test_linear_model.TestOrdinaryLeastSquares.test_fit_intercept)",
    "test_fit_intercept (test_linear_model.TestRidge.test_fit_intercept)",
    "test_fit_invalid_data_type (test_time_series_arima.TestARIMA.test_fit_invalid_data_type)",
    "test_fit_invalid_input_empty_data (test_trees_adaboost.TestAdaBoostClassifier.test_fit_invalid_input_empty_data)",
    "test_fit_invalid_input_empty_data (test_trees_adaboost.TestAdaBoostRegressor.test_fit_invalid_input_empty_data)",
    "test_fit_invalid_input_mismatched_shapes (test_trees_adaboost.TestAdaBoostClassifier.test_fit_invalid_input_mismatched_shapes)",
    "test_fit_invalid_input_mismatched_shapes (test_trees_adaboost.TestAdaBoostRegressor.test_fit_invalid_input_mismatched_shapes)",
    "test_fit_invalid_input_y_not_1d (test_trees_adaboost.TestAdaBoostRegressor.test_fit_invalid_input_y_not_1d)",
    "test_fit_invalid_sample_weights (test_trees_regressor.TestGradientBoostedRegressor.test_fit_invalid_sample_weights)",
    "test_fit_invalid_sample_weights (test_trees_regressor.TestRandomForestRegressor.test_fit_invalid_sample_weights)",
    "test_fit_invalid_sample_weights (test_trees_regressor.TestRegressorTree.test_fit_invalid_sample_weights)",
    "test_fit_invalid_series (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_fit_invalid_series)",
    "test_fit_invalid_shape (test_trees_classifier.TesGradientBoostedClassifier.test_fit_invalid_shape)",
    "test_fit_invalid_shape_X (test_trees_classifier.TesGradientBoostedClassifier.test_fit_invalid_shape_X)",
    "test_fit_invalid_shape_y (test_trees_classifier.TesGradientBoostedClassifier.test_fit_invalid_shape_y)",
    "test_fit_invalid_X (test_trees_classifier.TesGradientBoostedClassifier.test_fit_invalid_X)",
    "test_fit_invalid_y (test_trees_classifier.TesGradientBoostedClassifier.test_fit_invalid_y)",
    "test_fit_k (test_linear_model.TestRANSAC.test_fit_k)",
    "test_fit_max_depth_limit (test_trees_regressor.TestRegressorTree.test_fit_max_depth_limit)",
    "test_fit_max_iter (test_linear_model.TestBayesian.test_fit_max_iter)",
    "test_fit_max_iter (test_linear_model.TestLasso.test_fit_max_iter)",
    "test_fit_max_iter (test_linear_model.TestPassiveAggressiveRegressor.test_fit_max_iter)",
    "test_fit_max_iter (test_linear_model.TestRidge.test_fit_max_iter)",
    "test_fit_mismatched_lengths (test_time_series_arima.TestSARIMAX.test_fit_mismatched_lengths)",
    "test_fit_multiclass (test_svm_generalized.TestGeneralizedSVC.test_fit_multiclass)",
    "test_fit_multiclass (test_svm_linear.TestLinearSVC.test_fit_multiclass)",
    "test_fit_n (test_linear_model.TestRANSAC.test_fit_n)",
    "test_fit_nan_series (test_time_series_decomposition.TestAdditiveDecomposition.test_fit_nan_series)",
    "test_fit_no_features (test_trees_classifier.TesGradientBoostedClassifier.test_fit_no_features)",
    "test_fit_no_features (test_trees_classifier.TestRandomForestClassifier.test_fit_no_features)",
    "test_fit_no_model (test_pipelines_forecasting.TestForecastingPipeline.test_fit_no_model)",
    "test_fit_no_preprocessors (test_pipelines_forecasting.TestForecastingPipeline.test_fit_no_preprocessors)",
    "test_fit_no_samples (test_trees_classifier.TesGradientBoostedClassifier.test_fit_no_samples)",
    "test_fit_no_samples (test_trees_classifier.TestRandomForestClassifier.test_fit_no_samples)",
    "test_fit_no_X (test_trees_classifier.TesGradientBoostedClassifier.test_fit_no_X)",
    "test_fit_no_y (test_trees_classifier.TesGradientBoostedClassifier.test_fit_no_y)",
    "test_fit_non_numeric_sample_weights (test_trees_regressor.TestGradientBoostedRegressor.test_fit_non_numeric_sample_weights)",
    "test_fit_non_numeric_sample_weights (test_trees_regressor.TestRandomForestRegressor.test_fit_non_numeric_sample_weights)",
    "test_fit_non_numeric_sample_weights (test_trees_regressor.TestRegressorTree.test_fit_non_numeric_sample_weights)",
    "test_fit_non_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_fit_non_positive)",
    "test_fit_non_positive_short_series (test_time_series_decomposition.TestMultiplicativeDecomposition.test_fit_non_positive_short_series)",
    "test_fit_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_fit_positive)",
    "test_fit_positive_nan_series (test_time_series_decomposition.TestMultiplicativeDecomposition.test_fit_positive_nan_series)",
    "test_fit_positive_short_series (test_time_series_decomposition.TestMultiplicativeDecomposition.test_fit_positive_short_series)",
    "test_fit_predict (test_linear_model.TestBayesian.test_fit_predict)",
    "test_fit_predict (test_linear_model.TestLasso.test_fit_predict)",
    "test_fit_predict (test_linear_model.TestOrdinaryLeastSquares.test_fit_predict)",
    "test_fit_predict (test_linear_model.TestPassiveAggressiveRegressor.test_fit_predict)",
    "test_fit_predict (test_linear_model.TestRANSAC.test_fit_predict)",
    "test_fit_predict (test_linear_model.TestRidge.test_fit_predict)",
    "test_fit_predict (test_pipelines.TestPipeline.test_fit_predict)",
    "test_fit_predict (test_trees_adaboost.TestAdaBoostRegressor.test_fit_predict)",
    "test_fit_predict_binary (test_linear_model.TestLogisticRegression.test_fit_predict_binary)",
    "test_fit_predict_binary (test_linear_model.TestPerceptron.test_fit_predict_binary)",
    "test_fit_predict_binary (test_trees_adaboost.TestAdaBoostClassifier.test_fit_predict_binary)",
    "test_fit_predict_classification (test_pipelines.TestPipeline.test_fit_predict_classification)",
    "test_fit_predict_multiclass (test_linear_model.TestLogisticRegression.test_fit_predict_multiclass)",
    "test_fit_predict_multiclass (test_linear_model.TestPerceptron.test_fit_predict_multiclass)",
    "test_fit_predict_multiclass (test_trees_adaboost.TestAdaBoostClassifier.test_fit_predict_multiclass)",
    "test_fit_predict_no_method (test_pipelines.TestPipeline.test_fit_predict_no_method)",
    "test_fit_predict_regression (test_pipelines.TestPipeline.test_fit_predict_regression)",
    "test_fit_predict_simple_binary (test_svm_generalized.TestGeneralizedSVC.test_fit_predict_simple_binary)",
    "test_fit_predict_simple_binary (test_svm_linear.TestLinearSVC.test_fit_predict_simple_binary)",
    "test_fit_pure_values (test_trees_regressor.TestRegressorTree.test_fit_pure_values)",
    "test_fit_random_over_sampler_invalid (test_utils.TestDataAugmentation.test_fit_random_over_sampler_invalid)",
    "test_fit_random_over_sampler_invalid_params (test_utils.TestDataAugmentation.test_fit_random_over_sampler_invalid_params)",
    "test_fit_random_under_sampler_invalid (test_utils.TestDataAugmentation.test_fit_random_under_sampler_invalid)",
    "test_fit_random_under_sampler_invalid_params (test_utils.TestDataAugmentation.test_fit_random_under_sampler_invalid_params)",
    "test_fit_regression (test_svm_generalized.TestGeneralizedSVR.test_fit_regression)",
    "test_fit_regression (test_svm_linear.TestLinearSVR.test_fit_regression)",
    "test_fit_sample_weights (test_trees_classifier.TesGradientBoostedClassifier.test_fit_sample_weights)",
    "test_fit_sample_weights (test_trees_classifier.TestRandomForestClassifier.test_fit_sample_weights)",
    "test_fit_sample_weights (test_trees_regressor.TestGradientBoostedRegressor.test_fit_sample_weights)",
    "test_fit_sample_weights (test_trees_regressor.TestRandomForestRegressor.test_fit_sample_weights)",
    "test_fit_sample_weights (test_trees_regressor.TestRegressorTree.test_fit_sample_weights)",
    "test_fit_sample_weights_different_length (test_trees_classifier.TesGradientBoostedClassifier.test_fit_sample_weights_different_length)",
    "test_fit_sample_weights_different_length (test_trees_classifier.TestRandomForestClassifier.test_fit_sample_weights_different_length)",
    "test_fit_sample_weights_empty (test_trees_classifier.TesGradientBoostedClassifier.test_fit_sample_weights_empty)",
    "test_fit_sample_weights_empty (test_trees_classifier.TestRandomForestClassifier.test_fit_sample_weights_empty)",
    "test_fit_sample_weights_empty (test_trees_regressor.TestGradientBoostedRegressor.test_fit_sample_weights_empty)",
    "test_fit_sample_weights_empty (test_trees_regressor.TestRandomForestRegressor.test_fit_sample_weights_empty)",
    "test_fit_sample_weights_empty (test_trees_regressor.TestRegressorTree.test_fit_sample_weights_empty)",
    "test_fit_sample_weights_none (test_trees_classifier.TesGradientBoostedClassifier.test_fit_sample_weights_none)",
    "test_fit_sample_weights_none (test_trees_classifier.TestRandomForestClassifier.test_fit_sample_weights_none)",
    "test_fit_sample_weights_none (test_trees_regressor.TestGradientBoostedRegressor.test_fit_sample_weights_none)",
    "test_fit_sample_weights_none (test_trees_regressor.TestRandomForestRegressor.test_fit_sample_weights_none)",
    "test_fit_sample_weights_shape_mismatch (test_trees_regressor.TestGradientBoostedRegressor.test_fit_sample_weights_shape_mismatch)",
    "test_fit_sample_weights_shape_mismatch (test_trees_regressor.TestRandomForestRegressor.test_fit_sample_weights_shape_mismatch)",
    "test_fit_sample_weights_shape_mismatch (test_trees_regressor.TestRegressorTree.test_fit_sample_weights_shape_mismatch)",
    "test_fit_sarima (test_pipelines_forecasting.TestForecastingPipeline.test_fit_sarima)",
    "test_fit_sarimax (test_pipelines_forecasting.TestForecastingPipeline.test_fit_sarimax)",
    "test_fit_short_series_even_period (test_time_series_decomposition.TestAdditiveDecomposition.test_fit_short_series_even_period)",
    "test_fit_short_series_odd_period (test_time_series_decomposition.TestAdditiveDecomposition.test_fit_short_series_odd_period)",
    "test_fit_simple_moving_average (test_pipelines_forecasting.TestForecastingPipeline.test_fit_simple_moving_average)",
    "test_fit_single_class (test_trees_classifier.TesGradientBoostedClassifier.test_fit_single_class)",
    "test_fit_single_class (test_trees_classifier.TestRandomForestClassifier.test_fit_single_class)",
    "test_fit_single_data_point (test_trees_classifier.TesGradientBoostedClassifier.test_fit_single_data_point)",
    "test_fit_single_data_point (test_trees_classifier.TestRandomForestClassifier.test_fit_single_data_point)",
    "test_fit_single_value (test_trees_regressor.TestGradientBoostedRegressor.test_fit_single_value)",
    "test_fit_single_value (test_trees_regressor.TestRandomForestRegressor.test_fit_single_value)",
    "test_fit_single_value (test_trees_regressor.TestRegressorTree.test_fit_single_value)",
    "test_fit_t (test_linear_model.TestRANSAC.test_fit_t)",
    "test_fit_tol (test_linear_model.TestBayesian.test_fit_tol)",
    "test_fit_tol (test_linear_model.TestLasso.test_fit_tol)",
    "test_fit_tol (test_linear_model.TestPassiveAggressiveRegressor.test_fit_tol)",
    "test_fit_tol (test_linear_model.TestRidge.test_fit_tol)",
    "test_fit_transform (test_utils.TestPolynomialTransform.test_fit_transform)",
    "test_fit_transform (test_utils_dataPreprocessing.TestScaler.test_fit_transform)",
    "test_fit_triple_exponential_smoothing (test_pipelines_forecasting.TestForecastingPipeline.test_fit_triple_exponential_smoothing)",
    "test_fit_triple_exponential_smoothing_model (test_pipelines_forecasting.TestForecastingPipeline.test_fit_triple_exponential_smoothing_model)",
    "test_fit_verbose (test_trees_regressor.TestGradientBoostedRegressor.test_fit_verbose)",
    "test_fit_weighted_moving_average (test_pipelines_forecasting.TestForecastingPipeline.test_fit_weighted_moving_average)",
    "test_fit_with_empty_data (test_trees_isolation.TestIsolationForest.test_fit_with_empty_data)",
    "test_fit_with_empty_data (test_trees_isolation.TestIsolationTree.test_fit_with_empty_data)",
    "test_fitting (test_trees_classifier.TestRandomForestClassifier.test_fitting)",
    "test_fitting_single_value (test_trees_classifier.TestRandomForestClassifier.test_fitting_single_value)",
    "test_ForcastingAnimation (test_utils_imports.TestImportsUtils.test_ForcastingAnimation)",
    "test_forecast (test_time_series_arima.TestARIMA.test_forecast)",
    "test_forecast (test_time_series_arima.TestSARIMA.test_forecast)",
    "test_forecast (test_time_series_arima.TestSARIMAX.test_forecast)",
    "test_forecast (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_forecast)",
    "test_forecast (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_forecast)",
    "test_forecast (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_forecast)",
    "test_forecast (test_time_series_moving_average.TestExponentialMovingAverage.test_forecast)",
    "test_forecast (test_time_series_moving_average.TestSimpleMovingAverage.test_forecast)",
    "test_forecast (test_time_series_moving_average.TestWeightedMovingAverage.test_forecast)",
    "test_forecast (test_utils.TestForecastRegressor.test_forecast)",
    "test_forecast_1d_exog_future (test_time_series_arima.TestSARIMAX.test_forecast_1d_exog_future)",
    "test_forecast_invalid_steps (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps (test_time_series_moving_average.TestExponentialMovingAverage.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps (test_time_series_moving_average.TestSimpleMovingAverage.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps (test_time_series_moving_average.TestWeightedMovingAverage.test_forecast_invalid_steps)",
    "test_forecast_invalid_steps_type (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_forecast_invalid_steps_type)",
    "test_forecast_mismatched_exog_future_shape (test_time_series_arima.TestSARIMAX.test_forecast_mismatched_exog_future_shape)",
    "test_forecast_negative_steps (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_forecast_negative_steps)",
    "test_forecast_negative_steps (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_forecast_negative_steps)",
    "test_forecast_negative_steps (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_forecast_negative_steps)",
    "test_forecast_without_fit (test_time_series_arima.TestARIMA.test_forecast_without_fit)",
    "test_forecast_without_fit (test_time_series_arima.TestSARIMA.test_forecast_without_fit)",
    "test_forecast_without_fit (test_time_series_arima.TestSARIMAX.test_forecast_without_fit)",
    "test_forecasting_animate (test_utils_animator.TestAnimationIntegration.test_forecasting_animate)",
    "test_ForecastingPipeline (test_pipelines_imports.TestImportsPipelines.test_ForecastingPipeline)",
    "test_ForecastRegressor (test_utils_imports.TestImportsUtils.test_ForecastRegressor)",
    "test_forward (test_neural_networks_layers.TestConvLayer.test_forward)",
    "test_forward (test_neural_networks_layers.TestDenseLayer.test_forward)",
    "test_forward (test_neural_networks_layers.TestFlattenLayer.test_forward)",
    "test_forward_binary (test_neural_networks_base.TestNeuralNetworkVanilla.test_forward_binary)",
    "test_forward_binary (test_neural_networks_numba.TestNeuralNetworkNumba.test_forward_binary)",
    "test_forward_multiclass (test_neural_networks_base.TestNeuralNetworkVanilla.test_forward_multiclass)",
    "test_forward_multiclass (test_neural_networks_numba.TestNeuralNetworkNumba.test_forward_multiclass)",
    "test_forward_regression (test_neural_networks_base.TestNeuralNetworkVanilla.test_forward_regression)",
    "test_forward_regression (test_neural_networks_numba.TestNeuralNetworkNumba.test_forward_regression)",
    "test_forward_with_empty_input (test_neural_networks_layers.TestFlattenLayer.test_forward_with_empty_input)",
    "test_forward_with_large_padding (test_neural_networks_layers.TestConvLayer.test_forward_with_large_padding)",
    "test_forward_with_single_pixel (test_neural_networks_layers.TestConvLayer.test_forward_with_single_pixel)",
    "test_forward_with_zeros (test_neural_networks_layers.TestDenseLayer.test_forward_with_zeros)",
    "test_generalizedLinearSVC (test_utils.TestGridSearchCV.test_generalizedLinearSVC)",
    "test_generalizedLinearSVC (test_utils.TestRandomSearchCV.test_generalizedLinearSVC)",
    "test_generalizedLinearSVR (test_utils.TestGridSearchCV.test_generalizedLinearSVR)",
    "test_generalizedLinearSVR (test_utils.TestRandomSearchCV.test_generalizedLinearSVR)",
    "test_GeneralizedSVC (test_svm_imports.TestImportsSVM.test_GeneralizedSVC)",
    "test_GeneralizedSVR (test_svm_imports.TestImportsSVM.test_GeneralizedSVR)",
    "test_get_components (test_time_series_decomposition.TestAdditiveDecomposition.test_get_components)",
    "test_get_components_before_fit (test_time_series_decomposition.TestAdditiveDecomposition.test_get_components_before_fit)",
    "test_get_components_before_fit (test_time_series_decomposition.TestMultiplicativeDecomposition.test_get_components_before_fit)",
    "test_get_components_non_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_get_components_non_positive)",
    "test_get_components_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_get_components_positive)",
    "test_get_formula (test_linear_model.TestBayesian.test_get_formula)",
    "test_get_formula (test_linear_model.TestLasso.test_get_formula)",
    "test_get_formula (test_linear_model.TestOrdinaryLeastSquares.test_get_formula)",
    "test_get_formula (test_linear_model.TestPassiveAggressiveRegressor.test_get_formula)",
    "test_get_formula (test_linear_model.TestRANSAC.test_get_formula)",
    "test_get_formula (test_linear_model.TestRidge.test_get_formula)",
    "test_get_formula_with_intercept (test_linear_model.TestBayesian.test_get_formula_with_intercept)",
    "test_get_formula_with_intercept (test_linear_model.TestLasso.test_get_formula_with_intercept)",
    "test_get_formula_with_intercept (test_linear_model.TestOrdinaryLeastSquares.test_get_formula_with_intercept)",
    "test_get_formula_with_intercept (test_linear_model.TestPassiveAggressiveRegressor.test_get_formula_with_intercept)",
    "test_get_formula_with_intercept (test_linear_model.TestRANSAC.test_get_formula_with_intercept)",
    "test_get_formula_with_intercept (test_linear_model.TestRidge.test_get_formula_with_intercept)",
    "test_get_model (test_auto.TestAutoRegressor.test_get_model)",
    "test_get_param_combinations (test_utils.TestModelSelectionUtils.test_get_param_combinations)",
    "test_get_param_combinations_empty (test_utils.TestModelSelectionUtils.test_get_param_combinations_empty)",
    "test_get_param_combinations_invalid (test_utils.TestModelSelectionUtils.test_get_param_combinations_invalid)",
    "test_get_param_combinations_single (test_utils.TestModelSelectionUtils.test_get_param_combinations_single)",
    "test_get_params (test_utils.TestForecastRegressor.test_get_params)",
    "test_get_params (test_utils.TestVotingClassifier.test_get_params)",
    "test_get_params (test_utils.TestVotingRegressor.test_get_params)",
    "test_get_set_params (test_pipelines.TestPipeline.test_get_set_params)",
    "test_get_set_params (test_svm_generalized.TestGeneralizedSVC.test_get_set_params)",
    "test_get_set_params (test_svm_generalized.TestGeneralizedSVR.test_get_set_params)",
    "test_get_set_params (test_svm_linear.TestLinearSVC.test_get_set_params)",
    "test_get_set_params (test_svm_linear.TestLinearSVR.test_get_set_params)",
    "test_get_stats (test_trees_adaboost.TestAdaBoostClassifier.test_get_stats)",
    "test_get_stats (test_trees_adaboost.TestAdaBoostRegressor.test_get_stats)",
    "test_get_stats (test_trees_classifier.TesGradientBoostedClassifier.test_get_stats)",
    "test_get_stats (test_trees_regressor.TestGradientBoostedRegressor.test_get_stats)",
    "test_get_stats (test_trees_regressor.TestRandomForestRegressor.test_get_stats)",
    "test_GradientBoostedClassifier (test_trees_imports.TestImportsLinear.test_GradientBoostedClassifier)",
    "test_gradientBoostedClassifier.py (test_trees_examples.TestExamplesTrees.test_gradientBoostedClassifier.py)",
    "test_GradientBoostedRegressor (test_trees_imports.TestImportsLinear.test_GradientBoostedRegressor)",
    "test_gradientBoostedRegressor.py (test_trees_examples.TestExamplesTrees.test_gradientBoostedRegressor.py)",
    "test_gradientBoostiedClassifier (test_utils.TestGridSearchCV.test_gradientBoostiedClassifier)",
    "test_gradientBoostiedClassifier (test_utils.TestRandomSearchCV.test_gradientBoostiedClassifier)",
    "test_gradientBoostiedRegressor (test_utils.TestGridSearchCV.test_gradientBoostiedRegressor)",
    "test_gradientBoostiedRegressor (test_utils.TestRandomSearchCV.test_gradientBoostiedRegressor)",
    "test_GridSearchCV (test_utils_imports.TestImportsUtils.test_GridSearchCV)",
    "test_gridSearchCV_rfr.py (test_utils_examples.TestExamplesClustering.test_gridSearchCV_rfr.py)",
    "test_hp_tuning_grid (test_auto.TestAutoRegressor.test_hp_tuning_grid)",
    "test_hp_tuning_random (test_auto.TestAutoRegressor.test_hp_tuning_random)",
    "test_huber_loss (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaLoss.test_huber_loss)",
    "test_huber_loss (test_neural_networks_lossJIT.TestJITvsNonJITLosses.test_huber_loss)",
    "test_huber_loss_empty_inputs (test_neural_networks_loss.TestHuberLoss.test_huber_loss_empty_inputs)",
    "test_huber_loss_empty_inputs (test_neural_networks_lossJIT.TestHuberLoss.test_huber_loss_empty_inputs)",
    "test_huber_loss_extreme_values (test_neural_networks_loss.TestHuberLoss.test_huber_loss_extreme_values)",
    "test_huber_loss_extreme_values (test_neural_networks_lossJIT.TestHuberLoss.test_huber_loss_extreme_values)",
    "test_huber_loss_large_error (test_neural_networks_loss.TestHuberLoss.test_huber_loss_large_error)",
    "test_huber_loss_large_error (test_neural_networks_lossJIT.TestHuberLoss.test_huber_loss_large_error)",
    "test_huber_loss_mismatched_shapes (test_neural_networks_loss.TestHuberLoss.test_huber_loss_mismatched_shapes)",
    "test_huber_loss_mismatched_shapes (test_neural_networks_lossJIT.TestHuberLoss.test_huber_loss_mismatched_shapes)",
    "test_huber_loss_small_error (test_neural_networks_loss.TestHuberLoss.test_huber_loss_small_error)",
    "test_huber_loss_small_error (test_neural_networks_lossJIT.TestHuberLoss.test_huber_loss_small_error)",
    "test_im2col (test_neural_networks_layers.TestConvLayer.test_im2col)",
    "test_individual_imports (test_auto_imports.TestImportsLinear.test_individual_imports)",
    "test_individual_imports (test_clustering_imports.TestImportsClustering.test_individual_imports)",
    "test_individual_imports (test_linear_model_imports.TestImportsLinear.test_individual_imports)",
    "test_individual_imports (test_nearest_neighbors_imports.TestImportsNearestNeighbors.test_individual_imports)",
    "test_individual_imports (test_pipelines_imports.TestImportsPipelines.test_individual_imports)",
    "test_individual_imports (test_svm_imports.TestImportsSVM.test_individual_imports)",
    "test_individual_imports (test_time_series_imports.TestImportsTimeSeries.test_individual_imports)",
    "test_individual_imports (test_trees_imports.TestImportsLinear.test_individual_imports)",
    "test_individual_imports (test_utils_imports.TestImportsUtils.test_individual_imports)",
    "test_inf_values_in_data (test_auto.TestAutoClassifier.test_inf_values_in_data)",
    "test_inf_values_in_data (test_auto.TestAutoRegressor.test_inf_values_in_data)",
    "test_information_gain (test_trees_classifier.TestClassifierTreeUtility.test_information_gain)",
    "test_information_gain_empty (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_empty)",
    "test_information_gain_no_split (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_no_split)",
    "test_information_gain_with_different_length_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_with_different_length_sample_weights)",
    "test_information_gain_with_empty_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_with_empty_sample_weights)",
    "test_information_gain_with_none_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_with_none_sample_weights)",
    "test_information_gain_with_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_information_gain_with_sample_weights)",
    "test_init (test_trees_classifier.TesGradientBoostedClassifier.test_init)",
    "test_init (test_trees_classifier.TestClassifierTree.test_init)",
    "test_init (test_trees_classifier.TestClassifierTreeUtility.test_init)",
    "test_init (test_trees_classifier.TestRandomForestClassifier.test_init)",
    "test_init (test_trees_regressor.TestGradientBoostedRegressor.test_init)",
    "test_init (test_trees_regressor.TestRandomForestRegressor.test_init)",
    "test_init (test_trees_regressor.TestRegressorTree.test_init)",
    "test_init (test_trees_regressor.TestRegressorTreeUtility.test_init)",
    "test_init (test_utils.TestForecastRegressor.test_init)",
    "test_init (test_utils.TestGridSearchCV.test_init)",
    "test_init (test_utils.TestRandomSearchCV.test_init)",
    "test_init (test_utils.TestVotingRegressor.test_init)",
    "test_init (test_utils_animator.TestClassificationAnimation.test_init)",
    "test_init (test_utils_animator.TestForcastingAnimation.test_init)",
    "test_init (test_utils_animator.TestRegressionAnimation.test_init)",
    "test_init_bad_learning_rate (test_trees_classifier.TesGradientBoostedClassifier.test_init_bad_learning_rate)",
    "test_init_bad_max_depth (test_trees_classifier.TesGradientBoostedClassifier.test_init_bad_max_depth)",
    "test_init_bad_min_samples_split (test_trees_classifier.TesGradientBoostedClassifier.test_init_bad_min_samples_split)",
    "test_init_bad_n_estimators (test_trees_classifier.TesGradientBoostedClassifier.test_init_bad_n_estimators)",
    "test_init_hard (test_utils.TestVotingClassifier.test_init_hard)",
    "test_init_invalid_estimators (test_utils.TestVotingClassifier.test_init_invalid_estimators)",
    "test_init_no_dynamic_parameter (test_utils_animator.TestClassificationAnimation.test_init_no_dynamic_parameter)",
    "test_init_no_dynamic_parameter (test_utils_animator.TestForcastingAnimation.test_init_no_dynamic_parameter)",
    "test_init_no_dynamic_parameter (test_utils_animator.TestRegressionAnimation.test_init_no_dynamic_parameter)",
    "test_init_no_static_parameters (test_utils_animator.TestClassificationAnimation.test_init_no_static_parameters)",
    "test_init_no_static_parameters (test_utils_animator.TestForcastingAnimation.test_init_no_static_parameters)",
    "test_init_no_static_parameters (test_utils_animator.TestRegressionAnimation.test_init_no_static_parameters)",
    "test_init_no_train_series (test_utils_animator.TestForcastingAnimation.test_init_no_train_series)",
    "test_init_no_X (test_utils_animator.TestClassificationAnimation.test_init_no_X)",
    "test_init_no_X (test_utils_animator.TestRegressionAnimation.test_init_no_X)",
    "test_init_no_y (test_utils_animator.TestClassificationAnimation.test_init_no_y)",
    "test_init_no_y (test_utils_animator.TestRegressionAnimation.test_init_no_y)",
    "test_init_weights_mismatch (test_utils.TestVotingClassifier.test_init_weights_mismatch)",
    "test_init_with_pca (test_utils_animator.TestClassificationAnimation.test_init_with_pca)",
    "test_init_with_pca (test_utils_animator.TestRegressionAnimation.test_init_with_pca)",
    "test_initialization (test_auto.TestAutoClassifier.test_initialization)",
    "test_initialization (test_auto.TestAutoRegressor.test_initialization)",
    "test_initialization (test_clustering.TestDBSCAN.test_initialization)",
    "test_initialization (test_clustering.TestDBSCANNumba.test_initialization)",
    "test_initialization (test_clustering.TestKMeans.test_initialization)",
    "test_initialization (test_neural_networks_animation.TestTrainingAnimator.test_initialization)",
    "test_initialization (test_neural_networks_base.TestNeuralNetworkVanilla.test_initialization)",
    "test_initialization (test_neural_networks_layers.TestConvLayer.test_initialization)",
    "test_initialization (test_neural_networks_layers.TestDenseLayer.test_initialization)",
    "test_initialization (test_neural_networks_numba.TestNeuralNetworkNumba.test_initialization)",
    "test_initialization (test_pipelines.TestPipeline.test_initialization)",
    "test_initialization (test_pipelines_forecasting.TestForecastingPipeline.test_initialization)",
    "test_initialization (test_time_series_arima.TestARIMA.test_initialization)",
    "test_initialization (test_time_series_arima.TestSARIMA.test_initialization)",
    "test_initialization (test_time_series_arima.TestSARIMAX.test_initialization)",
    "test_initialization (test_time_series_decomposition.TestAdditiveDecomposition.test_initialization)",
    "test_initialization (test_time_series_decomposition.TestMultiplicativeDecomposition.test_initialization)",
    "test_initialization (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_initialization)",
    "test_initialization (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_initialization)",
    "test_initialization (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_initialization)",
    "test_initialization (test_time_series_moving_average.TestExponentialMovingAverage.test_initialization)",
    "test_initialization (test_time_series_moving_average.TestSimpleMovingAverage.test_initialization)",
    "test_initialization (test_time_series_moving_average.TestWeightedMovingAverage.test_initialization)",
    "test_initialization_custom (test_trees_adaboost.TestAdaBoostClassifier.test_initialization_custom)",
    "test_initialization_custom (test_trees_adaboost.TestAdaBoostRegressor.test_initialization_custom)",
    "test_initialization_default (test_trees_adaboost.TestAdaBoostClassifier.test_initialization_default)",
    "test_initialization_default (test_trees_adaboost.TestAdaBoostRegressor.test_initialization_default)",
    "test_initialization_fail_eps_negative (test_clustering.TestDBSCAN.test_initialization_fail_eps_negative)",
    "test_initialization_fail_eps_negative (test_clustering.TestDBSCANNumba.test_initialization_fail_eps_negative)",
    "test_initialization_fail_eps_none (test_clustering.TestDBSCAN.test_initialization_fail_eps_none)",
    "test_initialization_fail_eps_none (test_clustering.TestDBSCANNumba.test_initialization_fail_eps_none)",
    "test_initialization_fail_eps_string (test_clustering.TestDBSCAN.test_initialization_fail_eps_string)",
    "test_initialization_fail_eps_string (test_clustering.TestDBSCANNumba.test_initialization_fail_eps_string)",
    "test_initialization_fail_eps_zero (test_clustering.TestDBSCAN.test_initialization_fail_eps_zero)",
    "test_initialization_fail_eps_zero (test_clustering.TestDBSCANNumba.test_initialization_fail_eps_zero)",
    "test_initialization_fail_max_iter_list (test_clustering.TestKMeans.test_initialization_fail_max_iter_list)",
    "test_initialization_fail_max_iter_negative (test_clustering.TestKMeans.test_initialization_fail_max_iter_negative)",
    "test_initialization_fail_max_iter_non_integer (test_clustering.TestKMeans.test_initialization_fail_max_iter_non_integer)",
    "test_initialization_fail_max_iter_none (test_clustering.TestKMeans.test_initialization_fail_max_iter_none)",
    "test_initialization_fail_max_iter_string (test_clustering.TestKMeans.test_initialization_fail_max_iter_string)",
    "test_initialization_fail_max_iter_tuple (test_clustering.TestKMeans.test_initialization_fail_max_iter_tuple)",
    "test_initialization_fail_max_iter_zero (test_clustering.TestKMeans.test_initialization_fail_max_iter_zero)",
    "test_initialization_fail_min_samples_list (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_list)",
    "test_initialization_fail_min_samples_list (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_list)",
    "test_initialization_fail_min_samples_negative (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_negative)",
    "test_initialization_fail_min_samples_negative (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_negative)",
    "test_initialization_fail_min_samples_none (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_none)",
    "test_initialization_fail_min_samples_none (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_none)",
    "test_initialization_fail_min_samples_string (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_string)",
    "test_initialization_fail_min_samples_string (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_string)",
    "test_initialization_fail_min_samples_tuple (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_tuple)",
    "test_initialization_fail_min_samples_tuple (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_tuple)",
    "test_initialization_fail_min_samples_zero (test_clustering.TestDBSCAN.test_initialization_fail_min_samples_zero)",
    "test_initialization_fail_min_samples_zero (test_clustering.TestDBSCANNumba.test_initialization_fail_min_samples_zero)",
    "test_initialization_fail_n_clusters_list (test_clustering.TestKMeans.test_initialization_fail_n_clusters_list)",
    "test_initialization_fail_n_clusters_negative (test_clustering.TestKMeans.test_initialization_fail_n_clusters_negative)",
    "test_initialization_fail_n_clusters_non_integer (test_clustering.TestKMeans.test_initialization_fail_n_clusters_non_integer)",
    "test_initialization_fail_n_clusters_none (test_clustering.TestKMeans.test_initialization_fail_n_clusters_none)",
    "test_initialization_fail_n_clusters_string (test_clustering.TestKMeans.test_initialization_fail_n_clusters_string)",
    "test_initialization_fail_n_clusters_too_large (test_clustering.TestKMeans.test_initialization_fail_n_clusters_too_large)",
    "test_initialization_fail_n_clusters_tuple (test_clustering.TestKMeans.test_initialization_fail_n_clusters_tuple)",
    "test_initialization_fail_n_clusters_zero (test_clustering.TestKMeans.test_initialization_fail_n_clusters_zero)",
    "test_initialization_fail_tol_list (test_clustering.TestKMeans.test_initialization_fail_tol_list)",
    "test_initialization_fail_tol_negative (test_clustering.TestKMeans.test_initialization_fail_tol_negative)",
    "test_initialization_fail_tol_none (test_clustering.TestKMeans.test_initialization_fail_tol_none)",
    "test_initialization_fail_tol_string (test_clustering.TestKMeans.test_initialization_fail_tol_string)",
    "test_initialization_fail_tol_tuple (test_clustering.TestKMeans.test_initialization_fail_tol_tuple)",
    "test_initialization_fail_tol_zero (test_clustering.TestKMeans.test_initialization_fail_tol_zero)",
    "test_initialization_invalid_alpha (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_initialization_invalid_alpha)",
    "test_initialization_invalid_alpha (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_initialization_invalid_alpha)",
    "test_initialization_invalid_alpha (test_time_series_moving_average.TestExponentialMovingAverage.test_initialization_invalid_alpha)",
    "test_initialization_invalid_alpha_high (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_initialization_invalid_alpha_high)",
    "test_initialization_invalid_alpha_low (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_initialization_invalid_alpha_low)",
    "test_initialization_invalid_alpha_type (test_time_series_exponential_smoothing.TestSimpleExponentialSmoothing.test_initialization_invalid_alpha_type)",
    "test_initialization_invalid_beta (test_time_series_exponential_smoothing.TestDoubleExponentialSmoothing.test_initialization_invalid_beta)",
    "test_initialization_invalid_beta (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_initialization_invalid_beta)",
    "test_initialization_invalid_gamma (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_initialization_invalid_gamma)",
    "test_initialization_invalid_period (test_time_series_exponential_smoothing.TestTripleExponentialSmoothing.test_initialization_invalid_period)",
    "test_initialization_invalid_period_low (test_time_series_decomposition.TestAdditiveDecomposition.test_initialization_invalid_period_low)",
    "test_initialization_invalid_period_low (test_time_series_decomposition.TestMultiplicativeDecomposition.test_initialization_invalid_period_low)",
    "test_initialization_invalid_period_type (test_time_series_decomposition.TestAdditiveDecomposition.test_initialization_invalid_period_type)",
    "test_initialization_invalid_period_type (test_time_series_decomposition.TestMultiplicativeDecomposition.test_initialization_invalid_period_type)",
    "test_initialization_invalid_weights (test_time_series_moving_average.TestWeightedMovingAverage.test_initialization_invalid_weights)",
    "test_initialization_invalid_window (test_time_series_moving_average.TestSimpleMovingAverage.test_initialization_invalid_window)",
    "test_initialization_invalid_window (test_time_series_moving_average.TestWeightedMovingAverage.test_initialization_invalid_window)",
    "test_initialize (test_neural_networks_optimizers.TestAdadeltaOptimizer.test_initialize)",
    "test_initialize (test_neural_networks_optimizers.TestAdamOptimizer.test_initialize)",
    "test_initialize (test_neural_networks_optimizers.TestSGDOptimizer.test_initialize)",
    "test_initialize (test_neural_networks_optimizersJIT.TestJITAdadeltaOptimizer.test_initialize)",
    "test_initialize (test_neural_networks_optimizersJIT.TestJITAdamOptimizer.test_initialize)",
    "test_initialize (test_neural_networks_optimizersJIT.TestJITSGDOptimizer.test_initialize)",
    "test_initialize_centroids (test_clustering.TestKMeans.test_initialize_centroids)",
    "test_initialize_centroids_random (test_clustering.TestKMeans.test_initialize_centroids_random)",
    "test_initialize_layers (test_neural_networks_base.TestNeuralNetworkVanilla.test_initialize_layers)",
    "test_initialize_layers (test_neural_networks_numba.TestNeuralNetworkNumba.test_initialize_layers)",
    "test_initialize_no_validation (test_neural_networks_animation.TestTrainingAnimator.test_initialize_no_validation)",
    "test_initialize_with_validation (test_neural_networks_animation.TestTrainingAnimator.test_initialize_with_validation)",
    "test_integer_inputs (test_neural_networks_base.TestNeuralNetworkVanilla.test_integer_inputs)",
    "test_integer_inputs (test_neural_networks_numba.TestNeuralNetworkNumba.test_integer_inputs)",
    "test_invalid_activation_derivative (test_neural_networks_layers.TestDenseLayer.test_invalid_activation_derivative)",
    "test_invalid_distance_metric (test_nearest_neighbors.TestKNeighborsClassifier.test_invalid_distance_metric)",
    "test_invalid_distance_metric (test_nearest_neighbors.TestKNeighborsRegressor.test_invalid_distance_metric)",
    "test_invalid_final_step (test_pipelines.TestPipeline.test_invalid_final_step)",
    "test_invalid_fit (test_linear_model.TestBayesian.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestLasso.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestLogisticRegression.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestOrdinaryLeastSquares.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestPassiveAggressiveRegressor.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestPerceptron.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestRANSAC.test_invalid_fit)",
    "test_invalid_fit (test_linear_model.TestRidge.test_invalid_fit)",
    "test_invalid_fit (test_utils.TestPolynomialTransform.test_invalid_fit)",
    "test_invalid_fit_numba (test_linear_model.TestLasso.test_invalid_fit_numba)",
    "test_invalid_fit_numba (test_linear_model.TestRidge.test_invalid_fit_numba)",
    "test_invalid_fp_precision (test_nearest_neighbors.TestKNeighborsClassifier.test_invalid_fp_precision)",
    "test_invalid_fp_precision (test_nearest_neighbors.TestKNeighborsRegressor.test_invalid_fp_precision)",
    "test_invalid_input_types (test_auto.TestAutoClassifier.test_invalid_input_types)",
    "test_invalid_input_types (test_auto.TestAutoRegressor.test_invalid_input_types)",
    "test_invalid_intermediate_step (test_pipelines.TestPipeline.test_invalid_intermediate_step)",
    "test_invalid_iter (test_utils.TestRandomSearchCV.test_invalid_iter)",
    "test_invalid_kernel (test_svm_linear.TestLinearSVC.test_invalid_kernel)",
    "test_invalid_kernel_svr (test_svm_linear.TestLinearSVR.test_invalid_kernel_svr)",
    "test_invalid_loss (test_trees_adaboost.TestAdaBoostRegressor.test_invalid_loss)",
    "test_invalid_method (test_utils_dataPreprocessing.TestScaler.test_invalid_method)",
    "test_invalid_model_name_in_get_model (test_auto.TestAutoRegressor.test_invalid_model_name_in_get_model)",
    "test_invalid_n_neighbors (test_nearest_neighbors.TestKNeighborsClassifier.test_invalid_n_neighbors)",
    "test_invalid_n_neighbors (test_nearest_neighbors.TestKNeighborsRegressor.test_invalid_n_neighbors)",
    "test_invalid_n_neighbors_greater_than_samples (test_nearest_neighbors.TestKNeighborsClassifier.test_invalid_n_neighbors_greater_than_samples)",
    "test_invalid_n_neighbors_greater_than_samples (test_nearest_neighbors.TestKNeighborsRegressor.test_invalid_n_neighbors_greater_than_samples)",
    "test_invalid_one_hot_encoding (test_nearest_neighbors.TestKNeighborsClassifier.test_invalid_one_hot_encoding)",
    "test_invalid_one_hot_encoding (test_nearest_neighbors.TestKNeighborsRegressor.test_invalid_one_hot_encoding)",
    "test_invalid_order_extra_parameter (test_time_series_arima.TestARIMA.test_invalid_order_extra_parameter)",
    "test_invalid_order_invalid_type (test_time_series_arima.TestARIMA.test_invalid_order_invalid_type)",
    "test_invalid_order_missing_parameter (test_time_series_arima.TestARIMA.test_invalid_order_missing_parameter)",
    "test_invalid_order_negative_value (test_time_series_arima.TestARIMA.test_invalid_order_negative_value)",
    "test_invalid_param_grid (test_utils.TestGridSearchCV.test_invalid_param_grid)",
    "test_invalid_param_grid (test_utils.TestRandomSearchCV.test_invalid_param_grid)",
    "test_invalid_predict (test_linear_model.TestBayesian.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestLasso.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestLogisticRegression.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestOrdinaryLeastSquares.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestPassiveAggressiveRegressor.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestPerceptron.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestRANSAC.test_invalid_predict)",
    "test_invalid_predict (test_linear_model.TestRidge.test_invalid_predict)",
    "test_invalid_seasonal_order_length_less_than_4 (test_time_series_arima.TestSARIMA.test_invalid_seasonal_order_length_less_than_4)",
    "test_invalid_seasonal_order_length_more_than_4 (test_time_series_arima.TestSARIMA.test_invalid_seasonal_order_length_more_than_4)",
    "test_invalid_seasonal_order_values (test_time_series_arima.TestSARIMA.test_invalid_seasonal_order_values)",
    "test_invalid_steps_names (test_pipelines.TestPipeline.test_invalid_steps_names)",
    "test_invalid_steps_not_list (test_pipelines.TestPipeline.test_invalid_steps_not_list)",
    "test_invalid_steps_tuple_format (test_pipelines.TestPipeline.test_invalid_steps_tuple_format)",
    "test_invalid_transform (test_utils.TestPolynomialTransform.test_invalid_transform)",
    "test_invalid_window_negative (test_time_series_decomposition.TestCenteredMovingAverage.test_invalid_window_negative)",
    "test_invalid_window_zero (test_time_series_decomposition.TestCenteredMovingAverage.test_invalid_window_zero)",
    "test_inverse_transform_without_fit (test_utils_dataPreprocessing.TestScaler.test_inverse_transform_without_fit)",
    "test_is_fitted (test_svm_generalized.TestGeneralizedSVC.test_is_fitted)",
    "test_is_fitted (test_svm_generalized.TestGeneralizedSVR.test_is_fitted)",
    "test_is_fitted (test_svm_linear.TestLinearSVC.test_is_fitted)",
    "test_is_fitted (test_svm_linear.TestLinearSVR.test_is_fitted)",
    "test_is_fitted (test_svm_oneClass.TestOneClassSVM.test_is_fitted)",
    "test_isoForest (test_utils.TestGridSearchCV.test_isoForest)",
    "test_isoForest (test_utils.TestRandomSearchCV.test_isoForest)",
    "test_iter_larger_than_param_combinations (test_utils.TestRandomSearchCV.test_iter_larger_than_param_combinations)",
    "test_jit_imports (test_imports.TestImports.test_jit_imports)",
    "test_JITAdadeltaOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITAdadeltaOptimizer)",
    "test_JITAdamOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITAdamOptimizer)",
    "test_JITBCEWithLogitsLoss (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITBCEWithLogitsLoss)",
    "test_JITCrossEntropyLoss (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITCrossEntropyLoss)",
    "test_JITDenseLayer (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITDenseLayer)",
    "test_JITSGDOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_JITSGDOptimizer)",
    "test_k_split (test_utils.TestDataPrep.test_k_split)",
    "test_k_split_invalid (test_utils.TestDataPrep.test_k_split_invalid)",
    "test_KMeans (test_clustering_imports.TestImportsClustering.test_KMeans)",
    "test_KNeighborsClassifier (test_nearest_neighbors_imports.TestImportsNearestNeighbors.test_KNeighborsClassifier)",
    "test_KNeighborsRegressor (test_nearest_neighbors_imports.TestImportsNearestNeighbors.test_KNeighborsRegressor)",
    "test_Lasso (test_linear_model_imports.TestImportsLinear.test_Lasso)",
    "test_lasso (test_utils.TestGridSearchCV.test_lasso)",
    "test_lasso (test_utils.TestRandomSearchCV.test_lasso)",
    "test_lasso.py (test_linear_model_examples.TestExamplesLinearModels.test_lasso.py)",
    "test_layer_weights_biases_initialization (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaTrain.test_layer_weights_biases_initialization)",
    "test_lda (test_linear_model.TestLinearDiscriminantAnalysis.test_lda)",
    "test_lda.py (test_linear_model_examples.TestExamplesLinearModels.test_lda.py)",
    "test_lda_bad_solver (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_bad_solver)",
    "test_lda_eigen (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_eigen)",
    "test_lda_lsqr (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_lsqr)",
    "test_lda_no_data (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_no_data)",
    "test_lda_no_solver (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_no_solver)",
    "test_lda_svd (test_linear_model.TestLinearDiscriminantAnalysis.test_lda_svd)",
    "test_lda_vs_qda_comparison.py (test_linear_model_examples.TestExamplesLinearModels.test_lda_vs_qda_comparison.py)",
    "test_leaky_relu_derivative (test_neural_networks_layers.TestDenseLayer.test_leaky_relu_derivative)",
    "test_learn (test_trees_classifier.TestClassifierTree.test_learn)",
    "test_learn_bad_type (test_trees_classifier.TestClassifierTree.test_learn_bad_type)",
    "test_learn_empty_dataset (test_trees_classifier.TestClassifierTree.test_learn_empty_dataset)",
    "test_learn_max_depth (test_trees_classifier.TestClassifierTree.test_learn_max_depth)",
    "test_learn_min_samples_split (test_trees_classifier.TestClassifierTree.test_learn_min_samples_split)",
    "test_learn_min_samples_split_not_enough_samples (test_trees_classifier.TestClassifierTree.test_learn_min_samples_split_not_enough_samples)",
    "test_learn_pure_labels (test_trees_classifier.TestClassifierTree.test_learn_pure_labels)",
    "test_learn_single_data_point (test_trees_classifier.TestClassifierTree.test_learn_single_data_point)",
    "test_learn_single_value (test_trees_classifier.TestClassifierTree.test_learn_single_value)",
    "test_learn_with_different_length_sample_weights (test_trees_classifier.TestClassifierTree.test_learn_with_different_length_sample_weights)",
    "test_learn_with_empty_sample_weights (test_trees_classifier.TestClassifierTree.test_learn_with_empty_sample_weights)",
    "test_learn_with_none_sample_weights (test_trees_classifier.TestClassifierTree.test_learn_with_none_sample_weights)",
    "test_learn_with_sample_weights (test_trees_classifier.TestClassifierTree.test_learn_with_sample_weights)",
    "test_linear_derivative (test_neural_networks_layers.TestDenseLayer.test_linear_derivative)",
    "test_linear_models_imports (test_imports.TestImports.test_linear_models_imports)",
    "test_LinearDiscriminantAnalysis (test_linear_model_imports.TestImportsLinear.test_LinearDiscriminantAnalysis)",
    "test_LinearSVC (test_svm_imports.TestImportsSVM.test_LinearSVC)",
    "test_linearSVC (test_utils.TestGridSearchCV.test_linearSVC)",
    "test_linearSVC (test_utils.TestRandomSearchCV.test_linearSVC)",
    "test_LinearSVR (test_svm_imports.TestImportsSVM.test_LinearSVR)",
    "test_linearSVR (test_utils.TestGridSearchCV.test_linearSVR)",
    "test_linearSVR (test_utils.TestRandomSearchCV.test_linearSVR)",
    "test_linearSVR.py (test_svm_examples.TestExamplesNearestNeighbors.test_linearSVR.py)",
    "test_log_loss (test_utils.TestMetrics.test_log_loss)",
    "test_LogisticRegression (test_linear_model_imports.TestImportsLinear.test_LogisticRegression)",
    "test_logisticRegression (test_utils.TestGridSearchCV.test_logisticRegression)",
    "test_logisticRegression (test_utils.TestRandomSearchCV.test_logisticRegression)",
    "test_loss_functions (test_trees_adaboost.TestAdaBoostRegressor.test_loss_functions)",
    "test_lr_scheduler (test_neural_networks_base.TestNeuralNetworkVanilla.test_lr_scheduler)",
    "test_lr_scheduler_exp (test_neural_networks_imports.TestImportsNeuralNetworks.test_lr_scheduler_exp)",
    "test_lr_scheduler_plateau (test_neural_networks_imports.TestImportsNeuralNetworks.test_lr_scheduler_plateau)",
    "test_lr_scheduler_step (test_neural_networks_imports.TestImportsNeuralNetworks.test_lr_scheduler_step)",
    "test_mae (test_utils.TestMetrics.test_mae)",
    "test_make_blobs (test_utils_imports.TestImportsUtils.test_make_blobs)",
    "test_make_blobs_basic (test_utils_makeData.TestMakeData.test_make_blobs_basic)",
    "test_make_blobs_center_box (test_utils_makeData.TestMakeData.test_make_blobs_center_box)",
    "test_make_blobs_cluster_std (test_utils_makeData.TestMakeData.test_make_blobs_cluster_std)",
    "test_make_blobs_different_stds (test_utils_makeData.TestMakeData.test_make_blobs_different_stds)",
    "test_make_blobs_invalid_params (test_utils_makeData.TestMakeData.test_make_blobs_invalid_params)",
    "test_make_blobs_large (test_utils_makeData.TestMakeData.test_make_blobs_large)",
    "test_make_blobs_n_samples_per_center (test_utils_makeData.TestMakeData.test_make_blobs_n_samples_per_center)",
    "test_make_blobs_shuffle (test_utils_makeData.TestMakeData.test_make_blobs_shuffle)",
    "test_make_blobs_specified_centers (test_utils_makeData.TestMakeData.test_make_blobs_specified_centers)",
    "test_make_classification (test_utils_imports.TestImportsUtils.test_make_classification)",
    "test_make_classification_basic (test_utils_makeData.TestMakeData.test_make_classification_basic)",
    "test_make_classification_class_sep (test_utils_makeData.TestMakeData.test_make_classification_class_sep)",
    "test_make_classification_flip_y (test_utils_makeData.TestMakeData.test_make_classification_flip_y)",
    "test_make_classification_informative_features (test_utils_makeData.TestMakeData.test_make_classification_informative_features)",
    "test_make_classification_invalid_params (test_utils_makeData.TestMakeData.test_make_classification_invalid_params)",
    "test_make_classification_large (test_utils_makeData.TestMakeData.test_make_classification_large)",
    "test_make_classification_n_classes (test_utils_makeData.TestMakeData.test_make_classification_n_classes)",
    "test_make_classification_redundant_features (test_utils_makeData.TestMakeData.test_make_classification_redundant_features)",
    "test_make_classification_repeated_features (test_utils_makeData.TestMakeData.test_make_classification_repeated_features)",
    "test_make_classification_weights (test_utils_makeData.TestMakeData.test_make_classification_weights)",
    "test_make_regression (test_utils_imports.TestImportsUtils.test_make_regression)",
    "test_make_regression_basic (test_utils_makeData.TestMakeData.test_make_regression_basic)",
    "test_make_regression_bias (test_utils_makeData.TestMakeData.test_make_regression_bias)",
    "test_make_regression_effective_rank (test_utils_makeData.TestMakeData.test_make_regression_effective_rank)",
    "test_make_regression_informative (test_utils_makeData.TestMakeData.test_make_regression_informative)",
    "test_make_regression_invalid_params (test_utils_makeData.TestMakeData.test_make_regression_invalid_params)",
    "test_make_regression_large (test_utils_makeData.TestMakeData.test_make_regression_large)",
    "test_make_regression_multi_target (test_utils_makeData.TestMakeData.test_make_regression_multi_target)",
    "test_make_regression_noise (test_utils_makeData.TestMakeData.test_make_regression_noise)",
    "test_make_regression_shuffle (test_utils_makeData.TestMakeData.test_make_regression_shuffle)",
    "test_make_sample_data (test_linear_model_imports.TestImportsLinear.test_make_sample_data)",
    "test_make_time_series (test_utils_imports.TestImportsUtils.test_make_time_series)",
    "test_make_time_series_basic (test_utils_makeData.TestMakeData.test_make_time_series_basic)",
    "test_make_time_series_invalid_seasonality (test_utils_makeData.TestMakeData.test_make_time_series_invalid_seasonality)",
    "test_make_time_series_invalid_trend (test_utils_makeData.TestMakeData.test_make_time_series_invalid_trend)",
    "test_make_time_series_multiple_features (test_utils_makeData.TestMakeData.test_make_time_series_multiple_features)",
    "test_make_time_series_noise (test_utils_makeData.TestMakeData.test_make_time_series_noise)",
    "test_make_time_series_seasonality (test_utils_makeData.TestMakeData.test_make_time_series_seasonality)",
    "test_make_time_series_trend (test_utils_makeData.TestMakeData.test_make_time_series_trend)",
    "test_makeData.py (test_utils_examples.TestExamplesClustering.test_makeData.py)",
    "test_mape (test_utils.TestMetrics.test_mape)",
    "test_mean_absolute_error_loss (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaLoss.test_mean_absolute_error_loss)",
    "test_mean_absolute_error_loss (test_neural_networks_loss.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss)",
    "test_mean_absolute_error_loss (test_neural_networks_lossJIT.TestJITvsNonJITLosses.test_mean_absolute_error_loss)",
    "test_mean_absolute_error_loss (test_neural_networks_lossJIT.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss)",
    "test_mean_absolute_error_loss_empty_inputs (test_neural_networks_loss.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss_empty_inputs)",
    "test_mean_absolute_error_loss_empty_inputs (test_neural_networks_lossJIT.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss_empty_inputs)",
    "test_mean_absolute_error_loss_mismatched_shapes (test_neural_networks_loss.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss_mismatched_shapes)",
    "test_mean_absolute_error_loss_mismatched_shapes (test_neural_networks_lossJIT.TestMeanAbsoluteErrorLoss.test_mean_absolute_error_loss_mismatched_shapes)",
    "test_mean_squared_error_loss (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaLoss.test_mean_squared_error_loss)",
    "test_mean_squared_error_loss (test_neural_networks_loss.TestMeanSquaredErrorLoss.test_mean_squared_error_loss)",
    "test_mean_squared_error_loss (test_neural_networks_lossJIT.TestJITvsNonJITLosses.test_mean_squared_error_loss)",
    "test_mean_squared_error_loss (test_neural_networks_lossJIT.TestMeanSquaredErrorLoss.test_mean_squared_error_loss)",
    "test_mean_squared_error_loss_empty_inputs (test_neural_networks_loss.TestMeanSquaredErrorLoss.test_mean_squared_error_loss_empty_inputs)",
    "test_mean_squared_error_loss_empty_inputs (test_neural_networks_lossJIT.TestMeanSquaredErrorLoss.test_mean_squared_error_loss_empty_inputs)",
    "test_mean_squared_error_loss_mismatched_shapes (test_neural_networks_loss.TestMeanSquaredErrorLoss.test_mean_squared_error_loss_mismatched_shapes)",
    "test_mean_squared_error_loss_mismatched_shapes (test_neural_networks_lossJIT.TestMeanSquaredErrorLoss.test_mean_squared_error_loss_mismatched_shapes)",
    "test_Metrics (test_utils_imports.TestImportsUtils.test_Metrics)",
    "test_minmax_scaling (test_utils_dataPreprocessing.TestScaler.test_minmax_scaling)",
    "test_minmax_scaling_inverse (test_utils_dataPreprocessing.TestScaler.test_minmax_scaling_inverse)",
    "test_mismatched_feature_target_lengths (test_auto.TestAutoClassifier.test_mismatched_feature_target_lengths)",
    "test_mismatched_feature_target_lengths (test_auto.TestAutoRegressor.test_mismatched_feature_target_lengths)",
    "test_ModelSelectionUtility (test_utils_imports.TestImportsUtils.test_ModelSelectionUtility)",
    "test_module_imports (test_imports.TestImports.test_module_imports)",
    "test_mpe (test_utils.TestMetrics.test_mpe)",
    "test_mse (test_utils.TestMetrics.test_mse)",
    "test_multiple_arrays (test_utils_dataSplitting.TestTrainTestSplit.test_multiple_arrays)",
    "test_MultiplicativeDecomposition (test_time_series_imports.TestImportsTimeSeries.test_MultiplicativeDecomposition)",
    "test_mvg_simpleMovingAverage.py (test_time_series_examples.TestExamplesNearestNeighbors.test_mvg_simpleMovingAverage.py)",
    "test_mvg_weightedMovingAverage.py (test_time_series_examples.TestExamplesNearestNeighbors.test_mvg_weightedMovingAverage.py)",
    "test_nan_values_in_data (test_auto.TestAutoClassifier.test_nan_values_in_data)",
    "test_nan_values_in_data (test_auto.TestAutoRegressor.test_nan_values_in_data)",
    "test_nearest_neighbors_imports (test_imports.TestImports.test_nearest_neighbors_imports)",
    "test_nearestNeighborsClassifier.py (test_nearest_neighbors_examples.TestExamplesNearestNeighbors.test_nearestNeighborsClassifier.py)",
    "test_nearestNeighborsRegressor.py (test_nearest_neighbors_examples.TestExamplesNearestNeighbors.test_nearestNeighborsRegressor.py)",
    "test_neural_networks_imports (test_imports.TestImports.test_neural_networks_imports)",
    "test_neuralNetwork_cancer.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_cancer.py)",
    "test_neuralNetwork_classifier.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_classifier.py)",
    "test_neuralNetwork_classifier_hyper.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_classifier_hyper.py)",
    "test_neuralNetwork_diabetes.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_diabetes.py)",
    "test_neuralNetwork_hyper.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_hyper.py)",
    "test_neuralNetwork_layers_conv.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_layers_conv.py)",
    "test_neuralNetwork_layers_conv_cifar.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_layers_conv_cifar.py)",
    "test_neuralNetwork_metrics_anim.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_metrics_anim.py)",
    "test_neuralNetwork_regressor.py (test_neural_networks_examples.TestExamplesNeuralNetworks.test_neuralNetwork_regressor.py)",
    "test_NeuralNetworkBase (test_neural_networks_imports.TestImportsNeuralNetworks.test_NeuralNetworkBase)",
    "test_neuralNetworkBaseBackend (test_neural_networks_imports.TestImportsNeuralNetworks.test_neuralNetworkBaseBackend)",
    "test_neuralNetworkNumbaBackend (test_neural_networks_imports.TestImportsNeuralNetworks.test_neuralNetworkNumbaBackend)",
    "test_no_fitted_models_in_evaluate (test_auto.TestAutoClassifier.test_no_fitted_models_in_evaluate)",
    "test_no_fitted_models_in_evaluate (test_auto.TestAutoRegressor.test_no_fitted_models_in_evaluate)",
    "test_no_fitted_models_in_summary (test_auto.TestAutoRegressor.test_no_fitted_models_in_summary)",
    "test_none_derivative (test_neural_networks_layers.TestDenseLayer.test_none_derivative)",
    "test_nonJIT_optimizer (test_neural_networks_numba.TestNeuralNetworkNumba.test_nonJIT_optimizer)",
    "test_nonlinear_kernel (test_svm_oneClass.TestOneClassSVM.test_nonlinear_kernel)",
    "test_nonlinear_kernel_classification (test_svm_generalized.TestGeneralizedSVC.test_nonlinear_kernel_classification)",
    "test_nonlinear_kernel_regression (test_svm_generalized.TestGeneralizedSVR.test_nonlinear_kernel_regression)",
    "test_normalize (test_utils_imports.TestImportsUtils.test_normalize)",
    "test_normalize_invalid_norm (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_normalize_invalid_norm)",
    "test_normalize_l1 (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_normalize_l1)",
    "test_normalize_l2 (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_normalize_l2)",
    "test_normalize_max (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_normalize_max)",
    "test_normalize_minmax (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_normalize_minmax)",
    "test_normalize_scaling (test_utils_dataPreprocessing.TestScaler.test_normalize_scaling)",
    "test_normalize_scaling_inverse (test_utils_dataPreprocessing.TestScaler.test_normalize_scaling_inverse)",
    "test_numba_method_imports (test_neural_networks_imports.TestImportsNeuralNetworks.test_numba_method_imports)",
    "test_numba_method_wildcard_import (test_neural_networks_imports.TestImportsNeuralNetworks.test_numba_method_wildcard_import)",
    "test_odd_window (test_time_series_decomposition.TestCenteredMovingAverage.test_odd_window)",
    "test_odd_window_longer (test_time_series_decomposition.TestCenteredMovingAverage.test_odd_window_longer)",
    "test_ols (test_utils.TestGridSearchCV.test_ols)",
    "test_ols (test_utils.TestRandomSearchCV.test_ols)",
    "test_ols.py (test_linear_model_examples.TestExamplesLinearModels.test_ols.py)",
    "test_one_hot_encode (test_utils.TestDataPrep.test_one_hot_encode)",
    "test_one_hot_encode (test_utils_imports.TestImportsUtils.test_one_hot_encode)",
    "test_one_hot_encode_dataframe (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_one_hot_encode_dataframe)",
    "test_one_hot_encode_dtype_np (test_utils.TestDataPrep.test_one_hot_encode_dtype_np)",
    "test_one_hot_encode_dtype_pd (test_utils.TestDataPrep.test_one_hot_encode_dtype_pd)",
    "test_one_hot_encode_empty (test_utils.TestDataPrep.test_one_hot_encode_empty)",
    "test_one_hot_encode_invalid (test_utils.TestDataPrep.test_one_hot_encode_invalid)",
    "test_one_hot_encode_invalid_col (test_utils.TestDataPrep.test_one_hot_encode_invalid_col)",
    "test_one_hot_encode_multiple (test_utils.TestDataPrep.test_one_hot_encode_multiple)",
    "test_one_hot_encode_numpy (test_utils_dataPreprocessing.TestCataPreprocessingFuncs.test_one_hot_encode_numpy)",
    "test_one_hot_encoding (test_nearest_neighbors.TestKNeighborsClassifier.test_one_hot_encoding)",
    "test_one_hot_encoding (test_nearest_neighbors.TestKNeighborsRegressor.test_one_hot_encoding)",
    "test_OneClassSVM (test_svm_imports.TestImportsSVM.test_OneClassSVM)",
    "test_oneClassSVM (test_utils.TestGridSearchCV.test_oneClassSVM)",
    "test_oneClassSVM (test_utils.TestRandomSearchCV.test_oneClassSVM)",
    "test_oob_predictions (test_trees_classifier.TestRandomForestClassifier.test_oob_predictions)",
    "test_OrdinaryLeastSquares (test_linear_model_imports.TestImportsLinear.test_OrdinaryLeastSquares)",
    "test_param_combinations (test_utils.TestGridSearchCV.test_param_combinations)",
    "test_param_combinations (test_utils.TestRandomSearchCV.test_param_combinations)",
    "test_partition_classes (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes)",
    "test_partition_classes_empty (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes_empty)",
    "test_partition_classes_single_element (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes_single_element)",
    "test_partition_classes_with_different_length_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes_with_different_length_sample_weights)",
    "test_partition_classes_with_empty_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes_with_empty_sample_weights)",
    "test_partition_classes_with_sample_weights (test_trees_classifier.TestClassifierTreeUtility.test_partition_classes_with_sample_weights)",
    "test_passiveAggReg (test_utils.TestGridSearchCV.test_passiveAggReg)",
    "test_passiveAggReg (test_utils.TestRandomSearchCV.test_passiveAggReg)",
    "test_passiveAggressive.py (test_linear_model_examples.TestExamplesLinearModels.test_passiveAggressive.py)",
    "test_passiveAggressive_vis.py (test_linear_model_examples.TestExamplesLinearModels.test_passiveAggressive_vis.py)",
    "test_PassiveAggressiveRegressor (test_linear_model_imports.TestImportsLinear.test_PassiveAggressiveRegressor)",
    "test_path_length (test_trees_isolation.TestIsolationTree.test_path_length)",
    "test_path_length_with_empty_data (test_trees_isolation.TestIsolationTree.test_path_length_with_empty_data)",
    "test_PCA (test_utils_imports.TestImportsUtils.test_PCA)",
    "test_pca_classification.py (test_utils_examples.TestExamplesClustering.test_pca_classification.py)",
    "test_pca_fit_transform (test_utils.TestDataDecomposition.test_pca_fit_transform)",
    "test_pca_invalid_input (test_utils.TestDataDecomposition.test_pca_invalid_input)",
    "test_pca_regression.py (test_utils_examples.TestExamplesClustering.test_pca_regression.py)",
    "test_Perceptron (test_linear_model_imports.TestImportsLinear.test_Perceptron)",
    "test_perceptron (test_utils.TestGridSearchCV.test_perceptron)",
    "test_perceptron (test_utils.TestRandomSearchCV.test_perceptron)",
    "test_Pipeline (test_pipelines_imports.TestImportsPipelines.test_Pipeline)",
    "test_pipeline_classification.py (test_pipelines_examples.TestExamplesPipelines.test_pipeline_classification.py)",
    "test_pipeline_forecasting.py (test_pipelines_examples.TestExamplesPipelines.test_pipeline_forecasting.py)",
    "test_pipeline_regression.py (test_pipelines_examples.TestExamplesPipelines.test_pipeline_regression.py)",
    "test_pipeline_regression_tuning.py (test_pipelines_examples.TestExamplesPipelines.test_pipeline_regression_tuning.py)",
    "test_PolynomialTransform (test_utils_imports.TestImportsUtils.test_PolynomialTransform)",
    "test_polynomialTransform.py (test_utils_examples.TestExamplesClustering.test_polynomialTransform.py)",
    "test_precision (test_utils.TestMetrics.test_precision)",
    "test_predict (test_auto.TestAutoClassifier.test_predict)",
    "test_predict (test_clustering.TestDBSCAN.test_predict)",
    "test_predict (test_clustering.TestDBSCANNumba.test_predict)",
    "test_predict (test_clustering.TestKMeans.test_predict)",
    "test_predict (test_nearest_neighbors.TestKNeighborsClassifier.test_predict)",
    "test_predict (test_nearest_neighbors.TestKNeighborsRegressor.test_predict)",
    "test_predict (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaTrain.test_predict)",
    "test_predict (test_pipelines_forecasting.TestForecastingPipeline.test_predict)",
    "test_predict (test_svm_oneClass.TestOneClassSVM.test_predict)",
    "test_predict (test_trees_classifier.TesGradientBoostedClassifier.test_predict)",
    "test_predict (test_trees_isolation.TestIsolationForest.test_predict)",
    "test_predict (test_trees_regressor.TestGradientBoostedRegressor.test_predict)",
    "test_predict (test_trees_regressor.TestRandomForestRegressor.test_predict)",
    "test_predict (test_utils.TestVotingRegressor.test_predict)",
    "test_predict_after_fit (test_trees_regressor.TestRegressorTree.test_predict_after_fit)",
    "test_predict_all_steps (test_linear_model.TestPassiveAggressiveRegressor.test_predict_all_steps)",
    "test_predict_batch (test_trees_regressor.TestRegressorTree.test_predict_batch)",
    "test_predict_before_fit (test_auto.TestAutoRegressor.test_predict_before_fit)",
    "test_predict_before_fit (test_pipelines.TestPipeline.test_predict_before_fit)",
    "test_predict_before_fit (test_trees_adaboost.TestAdaBoostClassifier.test_predict_before_fit)",
    "test_predict_before_fit (test_trees_adaboost.TestAdaBoostRegressor.test_predict_before_fit)",
    "test_predict_before_fit (test_trees_regressor.TestGradientBoostedRegressor.test_predict_before_fit)",
    "test_predict_before_fit (test_trees_regressor.TestRandomForestRegressor.test_predict_before_fit)",
    "test_predict_before_fit (test_trees_regressor.TestRegressorTree.test_predict_before_fit)",
    "test_predict_binary (test_neural_networks_base.TestNeuralNetworkVanilla.test_predict_binary)",
    "test_predict_binary (test_neural_networks_numba.TestNeuralNetworkNumba.test_predict_binary)",
    "test_predict_binary (test_svm_generalized.TestGeneralizedSVC.test_predict_binary)",
    "test_predict_binary (test_svm_linear.TestLinearSVC.test_predict_binary)",
    "test_predict_empty_input (test_trees_regressor.TestGradientBoostedRegressor.test_predict_empty_input)",
    "test_predict_empty_input (test_trees_regressor.TestRandomForestRegressor.test_predict_empty_input)",
    "test_predict_fail_not_fitted (test_clustering.TestKMeans.test_predict_fail_not_fitted)",
    "test_predict_fail_X_3d (test_clustering.TestKMeans.test_predict_fail_X_3d)",
    "test_predict_fail_X_not_2d (test_clustering.TestKMeans.test_predict_fail_X_not_2d)",
    "test_predict_hard (test_utils.TestVotingClassifier.test_predict_hard)",
    "test_predict_hard_weighted (test_utils.TestVotingClassifier.test_predict_hard_weighted)",
    "test_predict_multiclass (test_neural_networks_base.TestNeuralNetworkVanilla.test_predict_multiclass)",
    "test_predict_multiclass (test_neural_networks_numba.TestNeuralNetworkNumba.test_predict_multiclass)",
    "test_predict_multiclass (test_svm_generalized.TestGeneralizedSVC.test_predict_multiclass)",
    "test_predict_multiclass (test_svm_linear.TestLinearSVC.test_predict_multiclass)",
    "test_predict_no_model (test_pipelines_forecasting.TestForecastingPipeline.test_predict_no_model)",
    "test_predict_no_preprocessors (test_pipelines_forecasting.TestForecastingPipeline.test_predict_no_preprocessors)",
    "test_predict_proba (test_pipelines.TestPipeline.test_predict_proba)",
    "test_predict_proba (test_trees_classifier.TesGradientBoostedClassifier.test_predict_proba)",
    "test_predict_proba (test_trees_classifier.TestRandomForestClassifier.test_predict_proba)",
    "test_predict_proba_binary (test_trees_adaboost.TestAdaBoostClassifier.test_predict_proba_binary)",
    "test_predict_proba_multiclass (test_trees_adaboost.TestAdaBoostClassifier.test_predict_proba_multiclass)",
    "test_predict_proba_no_method (test_pipelines.TestPipeline.test_predict_proba_no_method)",
    "test_predict_regression (test_neural_networks_base.TestNeuralNetworkVanilla.test_predict_regression)",
    "test_predict_regression (test_neural_networks_numba.TestNeuralNetworkNumba.test_predict_regression)",
    "test_predict_regression (test_svm_generalized.TestGeneralizedSVR.test_predict_regression)",
    "test_predict_regression (test_svm_linear.TestLinearSVR.test_predict_regression)",
    "test_predict_returns_float (test_trees_regressor.TestRegressorTree.test_predict_returns_float)",
    "test_predict_shape_mismatch (test_trees_regressor.TestGradientBoostedRegressor.test_predict_shape_mismatch)",
    "test_predict_shape_mismatch (test_trees_regressor.TestRandomForestRegressor.test_predict_shape_mismatch)",
    "test_predict_single_sample (test_trees_classifier.TestRandomForestClassifier.test_predict_single_sample)",
    "test_predict_single_sample (test_trees_regressor.TestRegressorTree.test_predict_single_sample)",
    "test_predict_specific_model (test_auto.TestAutoClassifier.test_predict_specific_model)",
    "test_predict_with_invalid_one_hot_encoding (test_nearest_neighbors.TestKNeighborsClassifier.test_predict_with_invalid_one_hot_encoding)",
    "test_predict_with_invalid_one_hot_encoding (test_nearest_neighbors.TestKNeighborsRegressor.test_predict_with_invalid_one_hot_encoding)",
    "test_predict_with_one_hot_encoding (test_nearest_neighbors.TestKNeighborsClassifier.test_predict_with_one_hot_encoding)",
    "test_predict_with_one_hot_encoding (test_nearest_neighbors.TestKNeighborsRegressor.test_predict_with_one_hot_encoding)",
    "test_qda (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda)",
    "test_qda.py (test_linear_model_examples.TestExamplesLinearModels.test_qda.py)",
    "test_qda_bad_priors (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_bad_priors)",
    "test_qda_bad_reg_param (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_bad_reg_param)",
    "test_qda_no_data (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_no_data)",
    "test_qda_no_priors (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_no_priors)",
    "test_qda_prior (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_prior)",
    "test_qda_reg_param (test_linear_model.TestQuadraticDiscriminantAnalysis.test_qda_reg_param)",
    "test_QuadraticDiscriminantAnalysis (test_linear_model_imports.TestImportsLinear.test_QuadraticDiscriminantAnalysis)",
    "test_r2 (test_utils.TestMetrics.test_r2)",
    "test_random_over_sampler (test_utils.TestDataAugmentation.test_random_over_sampler)",
    "test_random_over_sampler_invalid (test_utils.TestDataAugmentation.test_random_over_sampler_invalid)",
    "test_random_over_sampler_invalid_params (test_utils.TestDataAugmentation.test_random_over_sampler_invalid_params)",
    "test_random_state (test_utils_dataSplitting.TestTrainTestSplit.test_random_state)",
    "test_random_under_sampler (test_utils.TestDataAugmentation.test_random_under_sampler)",
    "test_random_under_sampler_invalid (test_utils.TestDataAugmentation.test_random_under_sampler_invalid)",
    "test_random_under_sampler_invalid_params (test_utils.TestDataAugmentation.test_random_under_sampler_invalid_params)",
    "test_RandomForestClassifier (test_trees_imports.TestImportsLinear.test_RandomForestClassifier)",
    "test_randomForestClassifier (test_utils.TestGridSearchCV.test_randomForestClassifier)",
    "test_randomForestClassifier (test_utils.TestRandomSearchCV.test_randomForestClassifier)",
    "test_randomForestClassifier.py (test_trees_examples.TestExamplesTrees.test_randomForestClassifier.py)",
    "test_RandomForestRegressor (test_trees_imports.TestImportsLinear.test_RandomForestRegressor)",
    "test_randomForestRegressor (test_utils.TestGridSearchCV.test_randomForestRegressor)",
    "test_randomForestRegressor (test_utils.TestRandomSearchCV.test_randomForestRegressor)",
    "test_randomForestRegressor.py (test_trees_examples.TestExamplesTrees.test_randomForestRegressor.py)",
    "test_RandomOverSampler (test_utils_imports.TestImportsUtils.test_RandomOverSampler)",
    "test_RandomSearchCV (test_utils_imports.TestImportsUtils.test_RandomSearchCV)",
    "test_randomSearchCV_bayes.py (test_utils_examples.TestExamplesClustering.test_randomSearchCV_bayes.py)",
    "test_randomSearchCV_passiveAggReg.py (test_utils_examples.TestExamplesClustering.test_randomSearchCV_passiveAggReg.py)",
    "test_randomSearchCV_rfc.py (test_utils_examples.TestExamplesClustering.test_randomSearchCV_rfc.py)",
    "test_RandomUnderSampler (test_utils_imports.TestImportsUtils.test_RandomUnderSampler)",
    "test_RANSAC (test_linear_model_imports.TestImportsLinear.test_RANSAC)",
    "test_ransac (test_utils.TestGridSearchCV.test_ransac)",
    "test_ransac (test_utils.TestRandomSearchCV.test_ransac)",
    "test_ransac.py (test_linear_model_examples.TestExamplesLinearModels.test_ransac.py)",
    "test_recall (test_utils.TestMetrics.test_recall)",
    "test_reconstruct (test_time_series_decomposition.TestAdditiveDecomposition.test_reconstruct)",
    "test_reconstruct_non_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_reconstruct_non_positive)",
    "test_reconstruct_positive (test_time_series_decomposition.TestMultiplicativeDecomposition.test_reconstruct_positive)",
    "test_regression_animate (test_utils_animator.TestAnimationIntegration.test_regression_animate)",
    "test_RegressionAnimation (test_utils_imports.TestImportsUtils.test_RegressionAnimation)",
    "test_RegressorTree (test_trees_imports.TestImportsLinear.test_RegressorTree)",
    "test_regressorTree (test_utils.TestGridSearchCV.test_regressorTree)",
    "test_regressorTree (test_utils.TestRandomSearchCV.test_regressorTree)",
    "test_RegressorTreeUtility (test_trees_imports.TestImportsLinear.test_RegressorTreeUtility)",
    "test_regularization (test_neural_networks_base.TestNeuralNetworkVanilla.test_regularization)",
    "test_regularization (test_neural_networks_numba.TestNeuralNetworkNumba.test_regularization)",
    "test_relu (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_relu)",
    "test_relu_derivative (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_relu_derivative)",
    "test_relu_derivative (test_neural_networks_layers.TestDenseLayer.test_relu_derivative)",
    "test_remove_evaluator (test_pipelines_forecasting.TestForecastingPipeline.test_remove_evaluator)",
    "test_remove_evaluator_not_found (test_pipelines_forecasting.TestForecastingPipeline.test_remove_evaluator_not_found)",
    "test_remove_model (test_pipelines_forecasting.TestForecastingPipeline.test_remove_model)",
    "test_remove_preprocessor (test_pipelines_forecasting.TestForecastingPipeline.test_remove_preprocessor)",
    "test_remove_preprocessor_not_found (test_pipelines_forecasting.TestForecastingPipeline.test_remove_preprocessor_not_found)",
    "test_Ridge (test_linear_model_imports.TestImportsLinear.test_Ridge)",
    "test_ridge (test_utils.TestGridSearchCV.test_ridge)",
    "test_ridge (test_utils.TestRandomSearchCV.test_ridge)",
    "test_ridge.py (test_linear_model_examples.TestExamplesLinearModels.test_ridge.py)",
    "test_rmse (test_utils.TestMetrics.test_rmse)",
    "test_SARIMA (test_time_series_imports.TestImportsTimeSeries.test_SARIMA)",
    "test_SARIMAX (test_time_series_imports.TestImportsTimeSeries.test_SARIMAX)",
    "test_save_functionality (test_utils_animator.TestAnimationIntegration.test_save_functionality)",
    "test_Scaler (test_utils_imports.TestImportsUtils.test_Scaler)",
    "test_score (test_svm_oneClass.TestOneClassSVM.test_score)",
    "test_score_binary (test_svm_generalized.TestGeneralizedSVC.test_score_binary)",
    "test_score_binary (test_svm_linear.TestLinearSVC.test_score_binary)",
    "test_score_multiclass (test_svm_generalized.TestGeneralizedSVC.test_score_multiclass)",
    "test_score_multiclass (test_svm_linear.TestLinearSVC.test_score_multiclass)",
    "test_score_regression (test_svm_generalized.TestGeneralizedSVR.test_score_regression)",
    "test_score_regression (test_svm_linear.TestLinearSVR.test_score_regression)",
    "test_seasonal_difference_d0 (test_time_series_arima.TestSARIMA.test_seasonal_difference_d0)",
    "test_seasonal_difference_d1 (test_time_series_arima.TestSARIMA.test_seasonal_difference_d1)",
    "test_seasonal_difference_d2 (test_time_series_arima.TestSARIMA.test_seasonal_difference_d2)",
    "test_series_with_nans (test_time_series_decomposition.TestCenteredMovingAverage.test_series_with_nans)",
    "test_set_params_invalid (test_pipelines.TestPipeline.test_set_params_invalid)",
    "test_setup_plot (test_utils_animator.TestClassificationAnimation.test_setup_plot)",
    "test_setup_plot (test_utils_animator.TestForcastingAnimation.test_setup_plot)",
    "test_setup_plot (test_utils_animator.TestRegressionAnimation.test_setup_plot)",
    "test_setup_training_video_fallback (test_neural_networks_animation.TestTrainingAnimator.test_setup_training_video_fallback)",
    "test_setup_training_video_no_initialize (test_neural_networks_animation.TestTrainingAnimator.test_setup_training_video_no_initialize)",
    "test_setup_training_video_success (test_neural_networks_animation.TestTrainingAnimator.test_setup_training_video_success)",
    "test_sgd_optimizer_initial_values (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaOptimizers.test_sgd_optimizer_initial_values)",
    "test_SGDOptimizer (test_neural_networks_imports.TestImportsNeuralNetworks.test_SGDOptimizer)",
    "test_show_classification_report (test_utils.TestMetrics.test_show_classification_report)",
    "test_show_confusion_matrix (test_utils.TestMetrics.test_show_confusion_matrix)",
    "test_show_models (test_utils.TestForecastRegressor.test_show_models)",
    "test_show_models (test_utils.TestVotingClassifier.test_show_models)",
    "test_show_models (test_utils.TestVotingRegressor.test_show_models)",
    "test_sigmoid (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_sigmoid)",
    "test_sigmoid_derivative (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_sigmoid_derivative)",
    "test_sigmoid_derivative (test_neural_networks_layers.TestDenseLayer.test_sigmoid_derivative)",
    "test_silhouette_score (test_clustering.TestDBSCAN.test_silhouette_score)",
    "test_silhouette_score (test_clustering.TestDBSCANNumba.test_silhouette_score)",
    "test_silhouette_score (test_clustering.TestKMeans.test_silhouette_score)",
    "test_SimpleExponentialSmoothing (test_time_series_imports.TestImportsTimeSeries.test_SimpleExponentialSmoothing)",
    "test_SimpleMovingAverage (test_time_series_imports.TestImportsTimeSeries.test_SimpleMovingAverage)",
    "test_single_sample (test_auto.TestAutoClassifier.test_single_sample)",
    "test_single_sample (test_auto.TestAutoRegressor.test_single_sample)",
    "test_single_sample (test_neural_networks_base.TestNeuralNetworkVanilla.test_single_sample)",
    "test_single_sample (test_neural_networks_numba.TestNeuralNetworkNumba.test_single_sample)",
    "test_smote (test_utils.TestDataAugmentation.test_smote)",
    "test_SMOTE (test_utils_imports.TestImportsUtils.test_SMOTE)",
    "test_smote_equal (test_utils.TestDataAugmentation.test_smote_equal)",
    "test_smote_invalid (test_utils.TestDataAugmentation.test_smote_invalid)",
    "test_smote_with_force_equal (test_utils.TestDataAugmentation.test_smote_with_force_equal)",
    "test_smth_doubleExponentialSmoothing.py (test_time_series_examples.TestExamplesNearestNeighbors.test_smth_doubleExponentialSmoothing.py)",
    "test_softmax_derivative (test_neural_networks_layers.TestDenseLayer.test_softmax_derivative)",
    "test_standard_scaling (test_utils_dataPreprocessing.TestScaler.test_standard_scaling)",
    "test_standard_scaling_inverse (test_utils_dataPreprocessing.TestScaler.test_standard_scaling_inverse)",
    "test_stratification (test_utils_dataSplitting.TestTrainTestSplit.test_stratification)",
    "test_suggest_order (test_time_series_arima.TestARIMA.test_suggest_order)",
    "test_suggest_order (test_time_series_arima.TestSARIMA.test_suggest_order)",
    "test_suggest_order (test_time_series_arima.TestSARIMAX.test_suggest_order)",
    "test_suggest_order_empty_data (test_time_series_arima.TestARIMA.test_suggest_order_empty_data)",
    "test_suggest_order_invalid_data (test_time_series_arima.TestARIMA.test_suggest_order_invalid_data)",
    "test_sum_axis0 (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaUtils.test_sum_axis0)",
    "test_summary (test_pipelines_forecasting.TestForecastingPipeline.test_summary)",
    "test_summary_no_evaluators (test_pipelines_forecasting.TestForecastingPipeline.test_summary_no_evaluators)",
    "test_summary_no_model (test_pipelines_forecasting.TestForecastingPipeline.test_summary_no_model)",
    "test_summary_no_preprocessors (test_pipelines_forecasting.TestForecastingPipeline.test_summary_no_preprocessors)",
    "test_SVD (test_utils_imports.TestImportsUtils.test_SVD)",
    "test_svd_classification.py (test_utils_examples.TestExamplesClustering.test_svd_classification.py)",
    "test_svd_fit_transform (test_utils.TestDataDecomposition.test_svd_fit_transform)",
    "test_svd_get_singular_values (test_utils.TestDataDecomposition.test_svd_get_singular_values)",
    "test_svd_invalid_input (test_utils.TestDataDecomposition.test_svd_invalid_input)",
    "test_svd_regression.py (test_utils_examples.TestExamplesClustering.test_svd_regression.py)",
    "test_svm_imports (test_imports.TestImports.test_svm_imports)",
    "test_tanh (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_tanh)",
    "test_tanh_derivative (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaActivations.test_tanh_derivative)",
    "test_tanh_derivative (test_neural_networks_layers.TestDenseLayer.test_tanh_derivative)",
    "test_time_series_imports (test_imports.TestImports.test_time_series_imports)",
    "test_train (test_neural_networks_base.TestNeuralNetworkVanilla.test_train)",
    "test_train (test_neural_networks_numba.TestNeuralNetworkNumba.test_train)",
    "test_train_loss_decrease (test_neural_networks_base.TestNeuralNetworkVanilla.test_train_loss_decrease)",
    "test_train_regression (test_neural_networks_base.TestNeuralNetworkVanilla.test_train_regression)",
    "test_train_test_split (test_utils_imports.TestImportsUtils.test_train_test_split)",
    "test_transform_only (test_pipelines.TestPipeline.test_transform_only)",
    "test_transform_without_fit (test_utils_dataPreprocessing.TestScaler.test_transform_without_fit)",
    "test_treeClassifier.py (test_trees_examples.TestExamplesTrees.test_treeClassifier.py)",
    "test_treeRegressor.py (test_trees_examples.TestExamplesTrees.test_treeRegressor.py)",
    "test_trees_imports (test_imports.TestImports.test_trees_imports)",
    "test_TripleExponentialSmoothing (test_time_series_imports.TestImportsTimeSeries.test_TripleExponentialSmoothing)",
    "test_tune (test_linear_model.TestBayesian.test_tune)",
    "test_update (test_neural_networks_optimizers.TestAdadeltaOptimizer.test_update)",
    "test_update (test_neural_networks_optimizers.TestAdamOptimizer.test_update)",
    "test_update (test_neural_networks_optimizers.TestSGDOptimizer.test_update)",
    "test_update_metrics (test_neural_networks_animation.TestTrainingAnimator.test_update_metrics)",
    "test_update_model (test_utils_animator.TestClassificationAnimation.test_update_model)",
    "test_update_model (test_utils_animator.TestForcastingAnimation.test_update_model)",
    "test_update_model (test_utils_animator.TestRegressionAnimation.test_update_model)",
    "test_update_plot_with_metrics (test_utils_animator.TestClassificationAnimation.test_update_plot_with_metrics)",
    "test_update_plot_with_metrics (test_utils_animator.TestForcastingAnimation.test_update_plot_with_metrics)",
    "test_update_plot_with_metrics (test_utils_animator.TestRegressionAnimation.test_update_plot_with_metrics)",
    "test_update_with_large_gradients (test_neural_networks_optimizers.TestAdadeltaOptimizer.test_update_with_large_gradients)",
    "test_update_with_large_gradients (test_neural_networks_optimizers.TestAdamOptimizer.test_update_with_large_gradients)",
    "test_update_with_large_gradients (test_neural_networks_optimizers.TestSGDOptimizer.test_update_with_large_gradients)",
    "test_update_with_large_gradients (test_neural_networks_optimizersJIT.TestJITAdadeltaOptimizer.test_update_with_large_gradients)",
    "test_update_with_large_gradients (test_neural_networks_optimizersJIT.TestJITAdamOptimizer.test_update_with_large_gradients)",
    "test_update_with_large_gradients (test_neural_networks_optimizersJIT.TestJITSGDOptimizer.test_update_with_large_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizers.TestAdadeltaOptimizer.test_update_with_small_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizers.TestAdamOptimizer.test_update_with_small_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizers.TestSGDOptimizer.test_update_with_small_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizersJIT.TestJITAdadeltaOptimizer.test_update_with_small_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizersJIT.TestJITAdamOptimizer.test_update_with_small_gradients)",
    "test_update_with_small_gradients (test_neural_networks_optimizersJIT.TestJITSGDOptimizer.test_update_with_small_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizers.TestAdadeltaOptimizer.test_update_with_zero_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizers.TestAdamOptimizer.test_update_with_zero_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizers.TestSGDOptimizer.test_update_with_zero_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizersJIT.TestJITAdadeltaOptimizer.test_update_with_zero_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizersJIT.TestJITAdamOptimizer.test_update_with_zero_gradients)",
    "test_update_with_zero_gradients (test_neural_networks_optimizersJIT.TestJITSGDOptimizer.test_update_with_zero_gradients)",
    "test_utils_imports (test_imports.TestImports.test_utils_imports)",
    "test_voting (test_trees_classifier.TestRandomForestClassifier.test_voting)",
    "test_voting_single_value (test_trees_classifier.TestRandomForestClassifier.test_voting_single_value)",
    "test_votingClassifier.py (test_utils_examples.TestExamplesClustering.test_votingClassifier.py)",
    "test_VotingRegressor (test_utils_imports.TestImportsUtils.test_VotingRegressor)",
    "test_WeightedMovingAverage (test_time_series_imports.TestImportsTimeSeries.test_WeightedMovingAverage)",
    "test_weights_biases_initialization (test_neural_networks_base_v_numba.TestNeuralNetworkBaseNumbaTrain.test_weights_biases_initialization)",
    "test_wildcard_import (test_auto_imports.TestImportsLinear.test_wildcard_import)",
    "test_wildcard_import (test_clustering_imports.TestImportsClustering.test_wildcard_import)",
    "test_wildcard_import (test_linear_model_imports.TestImportsLinear.test_wildcard_import)",
    "test_wildcard_import (test_nearest_neighbors_imports.TestImportsNearestNeighbors.test_wildcard_import)",
    "test_wildcard_import (test_pipelines_imports.TestImportsPipelines.test_wildcard_import)",
    "test_wildcard_import (test_svm_imports.TestImportsSVM.test_wildcard_import)",
    "test_wildcard_import (test_time_series_imports.TestImportsTimeSeries.test_wildcard_import)",
    "test_wildcard_import (test_trees_imports.TestImportsLinear.test_wildcard_import)",
    "test_wildcard_import (test_utils_imports.TestImportsUtils.test_wildcard_import)",
    "test_window_equals_series_even (test_time_series_decomposition.TestCenteredMovingAverage.test_window_equals_series_even)",
    "test_window_equals_series_odd (test_time_series_decomposition.TestCenteredMovingAverage.test_window_equals_series_odd)",
    "test_window_larger_than_series (test_time_series_decomposition.TestCenteredMovingAverage.test_window_larger_than_series)",
    "test_window_one (test_time_series_decomposition.TestCenteredMovingAverage.test_window_one)",
    "test_window_two (test_time_series_decomposition.TestCenteredMovingAverage.test_window_two)",
    "test_without_shuffling (test_utils_dataSplitting.TestTrainTestSplit.test_without_shuffling)",
    "test_write_data (test_utils.TestDataPrep.test_write_data)",
]
