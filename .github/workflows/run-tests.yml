name: Run Python Tests

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Runs on pushes to the main branch
  pull_request:
    branches: [ main ] # Runs on pull requests targeting the main branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # Run the job on Python 3.12 only
      matrix:
        python-version: ['3.12']
      fail-fast: false # Don't cancel other jobs if one fails

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Sets up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install uv (fast Python package installer/resolver)
      # Uses default version or latest
      - name: Install uv
        uses: astral-sh/setup-uv@v1

      # Install Required Libraries for numba/llvmlite compatibility
      - name: Install Required Libraries
        run: sudo apt-get install -y libgcc-12-dev

      # Install dependencies using uv sync. This creates/uses .venv by default.
      # This uses the default Python version (3.12) and installs all extras from pyproject.toml.
      # setup-uv action should automatically handle caching.
      - name: Install dependencies with uv sync
        run: uv sync --all-extras

      # Install the local project package *inside* the uv-managed environment.
      # `uv run` executes the command within the environment found/created by uv.
      # --no-deps is good practice here.
      # This step triggers setup.py build_ext within the correct environment.
      - name: Install project package
        run: uv run uv pip install --no-deps .

       # --- Test Steps ---
      # DISABLED! for development

      # # Step 1: Run main import tests first
      # - name: Run Main Import Test (test_imports.py)
      #   run: uv run python -m unittest tests/test_imports.py

      # # Step 2: Run module-specific import tests
      # - name: Run Module Import Tests
      #   run: uv run python -m unittest discover -s tests -p "test_*_imports.py"

      # # Step 3: Run unit/functional tests
      # # Run quick tests, filters for tests that run under CUTOFF, and not Numba/JIT
      # - name: Run Unit/Functional Tests
      #   run: uv run python tests/run_quick_tests.py

      # # Step 4: Run selected examples
      # - name: Run Examples
      #   run: |
      #     # Auto
      #     uv run python examples/auto/classifier.py
      #     # Clustering
      #     uv run python examples/clustering/dbscan.py
      #     uv run python examples/clustering/dbscan_3d.py
      #     # Linear Models
      #     uv run python examples/linear_models/bayes.py
      #     uv run python examples/linear_models/lasso.py
      #     uv run python examples/linear_models/lda.py
      #     uv run python examples/linear_models/logisticRegression.py
      #     uv run python examples/linear_models/ols.py
      #     uv run python examples/linear_models/passiveAggressive.py
      #     uv run python examples/linear_models/qda.py
      #     uv run python examples/linear_models/ransac.py
      #     uv run python examples/linear_models/ridge.py
      #     # Nearest Neighbors
      #     uv run python examples/nearest_neighbors/nearestNeighborsClassifier.py
      #     uv run python examples/nearest_neighbors/nearestNeighborsRegressor.py
      #     # Neural Networks
      #     uv run python examples/neural_networks/neuralNetwork_classifier.py
      #     uv run python examples/neural_networks/neuralNetwork_classifier_hyper.py
      #     uv run python examples/neural_networks/neuralNetwork_iris.py
      #     uv run python examples/neural_networks/neuralNetwork_layers_conv.py
      #     uv run python examples/neural_networks/neuralNetwork_metrics_anim.py
      #     uv run python examples/neural_networks/neuralNetwork_regressor.py
      #     # SVM
      #     uv run python examples/svm/generalizedSVC_multi.py
      #     uv run python examples/svm/linearSVC_binary.py
      #     uv run python examples/svm/linearSVR.py
      #     # Trees
      #     uv run python examples/trees/gradientBoostedRegressor.py
      #     uv run python examples/trees/isolationForest_reg.py
      #     uv run python examples/trees/randomForestClassifier.py
      #     uv run python examples/trees/randomForestRegressor.py
      #     # Utils
      #     uv run python examples/utils/dataAugmentation_combined.py
      #     uv run python examples/utils/dataAugmentation_randOver.py
      #     uv run python examples/utils/dataAugmentation_randUnder.py
      #     uv run python examples/utils/dataAugmentation_smote.py
      #     uv run python examples/utils/dataPreprocessing.py
      #     uv run python examples/utils/gridSearchCV_gbr.py
      #     uv run python examples/utils/gridSearchCV_rfc.py
      #     uv run python examples/utils/gridSearchCV_rfr.py
      #     uv run python examples/utils/makeData.py
      #     uv run python examples/utils/pca_classification.py
      #     uv run python examples/utils/pca_regression.py
      #     uv run python examples/utils/polynomialTransform.py
      #     uv run python examples/utils/randomSearchCV_bayes.py
      #     uv run python examples/utils/randomSearchCV_gbr.py
      #     uv run python examples/utils/randomSearchCV_rfc.py
      #     uv run python examples/utils/randomSearchCV_rfr.py
      #     uv run python examples/utils/segaSearchCV_rfr.py
      #     uv run python examples/utils/svd_classification.py
      #     uv run python examples/utils/svd_regression.py

      # # NOT BEING USED CURRENTLY
      # # ---------------------------------------
      # # (Alternative Step: Run ALL examples)
      # # - name: Run Example Tests
      # #   run: uv run python tests/run_all_examples.py

      # # (Alternative Step: Run ALL tests)
      # # - name: Run All Remaining Tests (Alternative)
      # #   run: uv run python -m unittest discover -s tests -p "test_*.py"
