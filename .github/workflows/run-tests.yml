name: Run Python Tests

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Runs on pushes to the main branch
  pull_request:
    branches: [ main ] # Runs on pull requests targeting the main branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # Run the job on multiple Python versions
      matrix:
        # python-version: ['3.9', '3.10', '3.11', '3.12']   # will use to test all versions
        python-version: ['3.12']                            # currently only 3.12 is tested
      fail-fast: false # Don't cancel other jobs if one fails

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Sets up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Install uv (fast Python package installer/resolver)
      # Uses default version or latest
      - name: Install uv
        uses: astral-sh/setup-uv@v1

      # Install Required Libraries for numba/llvmlite compatibility
      - name: Install Required Libraries
        run: sudo apt-get install -y libgcc-12-dev

      # Force reinstall numba and llvmlite to specific versions for compatibility
      - name: Uninstall numba and llvmlite
        run: |
          .venv/bin/pip uninstall -y numba llvmlite

      - name: Install numba and llvmlite
        run: |
          uv run uv pip install numba==0.61.0 llvmlite==0.44.0

      # Install dependencies using uv sync. This creates/uses .venv by default.
      # This uses the default Python version (3.12) and installs all extras from pyproject.toml.
      # setup-uv action should automatically handle caching.
      - name: Install dependencies with uv sync
        run: uv sync --all-extras

      # Install the local project package *inside* the uv-managed environment.
      # `uv run` executes the command within the environment found/created by uv.
      # --no-deps is still good practice here.
      # This step triggers setup.py build_ext within the correct environment.
      - name: Install project package
        run: uv run uv pip install --no-deps .

       # --- Test Steps ---

      # Step 1: Run main import tests first (quickest feedback)
      - name: Run Main Import Test (test_imports.py)
        run: uv run python -m unittest tests/test_imports.py

      # Step 2: Run module-specific import tests
      - name: Run Module Import Tests
        run: uv run python -m unittest discover -s tests -p "test_*_imports.py"

      # Step 3: Run unit/functional tests
      # TODO: Update this scrip to skip *_imports.py tests
      # This is currently rerunning all *_imports.py tests
      - name: Run Unit/Functional Tests
        run: uv run python tests/run_selected_tests.py

      # Step 4: Run all example tests
      - name: Run Example Tests
        run: uv run python tests/run_all_examples.py

      # (Alternative Step: Run ALL tests)
      # - name: Run All Remaining Tests (Alternative)
      #   run: uv run python -m unittest discover -s tests -p "test_*.py"
